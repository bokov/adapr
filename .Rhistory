plot(survo,ylim=c(0,1),ylab="Progression-free Survival",xlab="Months Since Diagnosis",main="PASS Progression Subjects \n(A lot of Baseline Data Missing)")
source('~/Documents/Projects/PCA_Spore/Programs/read_data.R')
get.risk.set2(survo)
survo
sfit <- survo
timeby <- 6
ystratalabs <- as.character(levels(summary(sfit)$strata))
ystratalabs
.df <- data.frame(time = sfit$time, n.risk = sfit$n.risk,
n.event = sfit$n.event, surv = sfit$surv, strata = summary(sfit, censored = T)$strata,
upper = sfit$upper, lower = sfit$lower)
sfit
names(sfit)
timeby <- 6
ystratalabs <- as.character(levels(summary(sfit)$strata))
times <- seq(0, max(sfit$time), by = timeby)
.df <- data.frame(time = sfit$time, n.risk = sfit$n.risk,
n.event = sfit$n.event, surv = sfit$surv, strata = 1
upper = sfit$upper, lower = sfit$lower)
.df <- data.frame(time = sfit$time, n.risk = sfit$n.risk,
n.event = sfit$n.event, surv = sfit$surv, strata = 1,
upper = sfit$upper, lower = sfit$lower)
.df
levels(.df$strata) <- ystratalabs
zeros <- data.frame(time = 0, surv = 1, strata = factor(ystratalabs, levels=levels(.df$strata)),
upper = 1, lower = 1)
.df <- rbind.fill(zeros, .df)
risk.data <- data.frame(strata = summary(sfit, times = times, extend = TRUE)$strata,
time = summary(sfit, times = times, extend = TRUE)$time,
n.risk = summary(sfit, times = times, extend = TRUE)$n.risk,n.event=summary(sfit, times = times, extend = TRUE)$n.event)
risk.data$strata2 <- ifelse(risk.data$time==0,gsub(".*=","",as.character(risk.data$strata)),"")
risk.data$time <- ifelse(risk.data$time==0,0.5,risk.data$time)
shift <- 2/1200
times <- seq(0, max(sfit$time), by = timeby)
.df <- data.frame(time = sfit$time, n.risk = sfit$n.risk,
n.event = sfit$n.event, surv = sfit$surv, strata = 1,
upper = sfit$upper, lower = sfit$lower)
levels(.df$strata) <- ystratalabs
zeros <- data.frame(time = 0, surv = 1, strata =1),
upper = 1, lower = 1)
.df <- rbind.fill(zeros, .df)
.df <- rbind.fill(zeros, .df)
timeby <- 6
ystratalabs <- as.character(levels(summary(sfit)$strata))
times <- seq(0, max(sfit$time), by = timeby)
.df <- data.frame(time = sfit$time, n.risk = sfit$n.risk,
n.event = sfit$n.event, surv = sfit$surv, strata = 1,
upper = sfit$upper, lower = sfit$lower)
levels(.df$strata) <- ystratalabs
zeros <- data.frame(time = 0, surv = 1, strata =1,
upper = 1, lower = 1)
.df <- rbind.fill(zeros, .df)
risk.data <- data.frame(strata =1,
time = summary(sfit, times = times, extend = TRUE)$time,
n.risk = summary(sfit, times = times, extend = TRUE)$n.risk,n.event=summary(sfit, times = times, extend = TRUE)$n.event)
risk.data$strata2 <- ifelse(risk.data$time==0,gsub(".*=","",as.character(risk.data$strata)),"")
risk.data$time <- ifelse(risk.data$time==0,0.5,risk.data$time)
risk.data
risk.data <- data.frame(strata =1,
time = summary(sfit, times = times, extend = TRUE)$time,
n.risk = summary(sfit, times = times, extend = TRUE)$n.risk,n.event=summary(sfit, times = times, extend = TRUE)$n.event)
risk.data$strata2 <- ifelse(risk.data$time==0,gsub(".*=","",as.character(risk.data$strata)),"")
risk.data$time <- ifelse(risk.data$time==0,0.5,risk.data$time)
shift <- 2/1200
ddply(risk.data,"strata",function(x){
y <- 0.0135-as.numeric(x$strata[1])*shift
if(legendTF){text(0.5,0.014,"# Events/# at Risk",pos=4)}
print(y)
text(x$time-0.2,y,paste0(x$n.event,"/",x$n.risk),cex=0.8,pos=4)
strata.label <- subset(x,time==min(time))$strata2[1]
print(strata.label)
text(0.1,y+0.5*shift,strata.label,pos=4,cex=0.8)
})
legendTF=TRUE
ddply(risk.data,"strata",function(x){
y <- 0.0135-as.numeric(x$strata[1])*shift
if(legendTF){text(0.5,0.014,"# Events/# at Risk",pos=4)}
print(y)
text(x$time-0.2,y,paste0(x$n.event,"/",x$n.risk),cex=0.8,pos=4)
strata.label <- subset(x,time==min(time))$strata2[1]
print(strata.label)
text(0.1,y+0.5*shift,strata.label,pos=4,cex=0.8)
})
timeby <- 6
ystratalabs <- as.character(levels(summary(sfit)$strata))
times <- seq(0, max(sfit$time), by = timeby)
.df <- data.frame(time = sfit$time, n.risk = sfit$n.risk,
n.event = sfit$n.event, surv = sfit$surv, strata = 1,
upper = sfit$upper, lower = sfit$lower)
levels(.df$strata) <- ystratalabs
zeros <- data.frame(time = 0, surv = 1, strata =1,
upper = 1, lower = 1)
.df <- rbind.fill(zeros, .df)
risk.data <- data.frame(strata =1,
time = summary(sfit, times = times, extend = TRUE)$time,
n.risk = summary(sfit, times = times, extend = TRUE)$n.risk,n.event=summary(sfit, times = times, extend = TRUE)$n.event)
risk.data$strata2 <- ifelse(risk.data$time==0,gsub(".*=","",as.character(risk.data$strata)),"")
risk.data$time <- ifelse(risk.data$time==0,0.5,risk.data$time)
shift <- 2/1200
ddply(risk.data,"strata",function(x){
y <- 0.0135-as.numeric(x$strata[1])*shift
if(legendTF){text(0.5,0.1,"# Events/# at Risk",pos=4)}
print(y)
text(x$time-0.2,y,paste0(x$n.event,"/",x$n.risk),cex=0.8,pos=4)
strata.label <- subset(x,time==min(time))$strata2[1]
print(strata.label)
text(0.1,y+0.5*shift,strata.label,pos=4,cex=0.8)
})
plot(survo,ylim=c(0,1),ylab="Progression-free Survival",xlab="Months Since Diagnosis",main="PASS Progression Subjects \n(A lot of Baseline Data Missing)")
get.risk.set2 <- function(sfit,legendTF=TRUE){
timeby <- 6
ystratalabs <- as.character(levels(summary(sfit)$strata))
times <- seq(0, max(sfit$time), by = timeby)
.df <- data.frame(time = sfit$time, n.risk = sfit$n.risk,
n.event = sfit$n.event, surv = sfit$surv, strata = 1,
upper = sfit$upper, lower = sfit$lower)
levels(.df$strata) <- ystratalabs
zeros <- data.frame(time = 0, surv = 1, strata =1,
upper = 1, lower = 1)
.df <- rbind.fill(zeros, .df)
risk.data <- data.frame(strata =1,
time = summary(sfit, times = times, extend = TRUE)$time,
n.risk = summary(sfit, times = times, extend = TRUE)$n.risk,n.event=summary(sfit, times = times, extend = TRUE)$n.event)
risk.data$strata2 <- ifelse(risk.data$time==0,gsub(".*=","",as.character(risk.data$strata)),"")
risk.data$time <- ifelse(risk.data$time==0,0.5,risk.data$time)
shift <- 2/1200
ddply(risk.data,"strata",function(x){
y <- 0.0135-as.numeric(x$strata[1])*shift
if(legendTF){text(0.5,0.1,"# Events/# at Risk",pos=4)}
print(y)
text(x$time-0.2,y,paste0(x$n.event,"/",x$n.risk),cex=0.8,pos=4)
strata.label <- subset(x,time==min(time))$strata2[1]
print(strata.label)
text(0.1,y+0.5*shift,strata.label,pos=4,cex=0.8)
})
return(risk.data)
}
get.risk.set2(survo,legendTF=TRUE)
ddply(risk.data,"strata",function(x){
y <- 0.0135-as.numeric(x$strata[1])*shift
if(legendTF){text(0.5,0.1,"# Events/# at Risk",pos=4)}
print(y)
text(x$time-0.2,y,paste0(x$n.event,"/",x$n.risk),cex=0.8,pos=4)
strata.label <- subset(x,time==min(time))$strata2[1]
print(strata.label)
text(0.1,y+0.5*shift,strata.label,pos=4,cex=0.8)
})
source('~/Documents/Projects/PCA_Spore/Programs/support_functions/ggkm2.R')
plot(survo,ylim=c(0,1),ylab="Progression-free Survival",xlab="Months Since Diagnosis",main="PASS Progression Subjects \n(A lot of Baseline Data Missing)")
get.risk.set2(survo,legendTF=TRUE)
summary(survo)$table
round(sumtab$0.95LCL)
(sumtab$`0.95LCL`
)
leg <- paste("Median",round(sumtab$median,1) , "95% CI",round(sumtab$`0.95LCL`),"to",round(sumtab$`0.95UCL`))
sumtab <- summary(survo)$table
leg <- paste("Median",round(sumtab$median,1) , "95% CI",round(sumtab$`0.95LCL`),"to",round(sumtab$`0.95UCL`))
round(sumtab$median,1)
sumtab <- summary(survo)$table
class(sumtab)
sumtab[`0.95LCL`]
sumtab["0.95LCL"]
leg <- paste("Median",round(sumtab["median"],1) , "95% CI",round(sumtab["0.95LCL"]),"to",round(sumtab["0.95UCL"]))
leg
source('~/Documents/Projects/PCA_Spore/Programs/read_data.R')
source('~/Documents/Projects/PCA_Spore/Programs/read_data.R')
source('~/Documents/Projects/PCA_Spore/Programs/read_data.R')
plot(survo,ylim=c(0,1),ylab="Progression-free Survival",xlab="Months Since Diagnosis",main="PASS Progression Subjects \n(A lot of Baseline Data Missing)")
get.risk.set2(survo,legendTF=TRUE)
sumtab <- summary(survo)$table
leg <- paste("Median",round(sumtab["median"],1) , ", 95% CI",round(sumtab["0.95LCL"]),"to",round(sumtab["0.95UCL"]))
legend("top",legend=leg,bty="none")
plot(survo,ylim=c(0,1),ylab="Progression-free Survival",xlab="Months Since Diagnosis",main="PASS Progression Subjects \n(A lot of Baseline Data Missing)")
get.risk.set2(survo,legendTF=TRUE)
sumtab <- summary(survo)$table
leg <- paste("Median",round(sumtab["median"],1) , ", 95% CI",round(sumtab["0.95LCL"]),"to",round(sumtab["0.95UCL"]))
legend("top",legend=leg,bty="n")
source('~/Documents/Projects/PCA_Spore/Programs/read_data.R')
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(survival)
library(lubridate)
library(ggplot2)
source.file <-"read_data.R"
project.id <- "PCA_Spore"
source_info <- create_source_file_dir(source.description="reads data")
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(survival)
library(lubridate)
library(ggplot2)
source.file <-"read_data.R"
project.id <- "PCA_Spore"
source_info <- create_source_file_dir(source.description="reads data")
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(survival)
library(lubridate)
library(ggplot2)
source.file <-"read_data.R"
project.id <- "PCA_Spore"
source_info <- create_source_file_dir(source.description="reads data")
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(survival)
library(lubridate)
library(ggplot2)
source.file <-"read_data.R"
project.id <- "PCA_Spore"
source_info <- create_source_file_dir(source.description="reads data")
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(survival)
library(lubridate)
library(ggplot2)
source.file <-"read_data.R"
project.id <- "PCA_Spore"
source_info <- create_source_file_dir(source.description="reads data")
source_info$options
source_info$option
source_info$options
source_info$opt
source_info$opti
source_info$option
source_info$options
load_all()
library(devtools)
load_all()
library(adapr)
source('~/Documents/Projects/PCA_Spore/Programs/read_data.R')
source('~/Documents/Projects/PCA_Spore/Programs/read_data.R')
library(adapr)
ls()
library(devtools)
load_all()
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
load_all()
library(adapr)
shiny::runApp('inst/adapr21')
get_adapr_options()
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
adapr_options
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
adapr_options
set_adapr_options("git","TRUE")
adapr_options <<- get_adapr_options()
adapr_options
shiny::runApp('inst/adapr21')
adapr_options
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
adapr_options
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
create_source_file_dir
get_adapr_options
library(devtools)
load_all()
library(adapr)
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
load_all()
library(adapr)
adapr21()
load_all()
library(adapr)
adapr21()
options
globaloptions <- options()
globaloptions
library(adapr)
get_adapr_options()
get_adapr_options
Sys.setenv()
Sys.getenv()
Sys.getenv()[["RSTUDIO"]]
rstudio <- ""
try({
rstudio <- Sys.getenv()[["RSTUDIO"]]
})
rstudio <- rstudio!="1"
studio
rstudio
rstudio <- ""
try({
rstudio <- Sys.getenv()[["RSTUDIO"]]
})
rstudio <- rstudio=="1"
rstudio
Sys.getenv("PATH")
get_adapr_options()
sysEnvironment <- Sys.getenv()
rstudio <- ""
try({
rstudio <- sysEnvironment[["RSTUDIO"]]
})
rstudio <- rstudio=="1"
if(!rstudio){stop("Please start up first time in RStudio to identify pandoc resources.")}
# check pandoc path
PATHer <- sysEnvironment[["PATH"]]
oldoptions <- get_adapr_options()
oldpath <- oldoptions$PATH
pandocpath <-sysEnvironment$RSTUDIO_PANDOC
sysEnvironment <- Sys.getenv()
sysEnvironment
pandocpath <-sysEnvironment[["RSTUDIO_PANDOC"]]
pandocpath
PATHer <- sysEnvironment[["PATH"]]
oldoptions <- get_adapr_options()
oldpath <- oldoptions$PATH
pandocpath <- sysEnvironment[["RSTUDIO_PANDOC"]]
if(!grepl("pandocpath",oldpath,fixed=TRUE)){paste0(oldpath,.Platform$path.sep,pandocpath)}
if(!grepl("pandocpath",oldpath,fixed=TRUE)){oldpath <- paste0(oldpath,.Platform$path.sep,pandocpath)}
oldpath
if(!grepl("pandocpath",oldpath,fixed=TRUE)){oldpath <- paste0(oldpath,.Platform$path.sep,pandocpath)}
oldpath
PATHer <- sysEnvironment[["PATH"]]
oldoptions <- get_adapr_options()
oldpath <- oldoptions$PATH
pandocpath <- sysEnvironment[["RSTUDIO_PANDOC"]]
if(!grepl(pandocpath,oldpath,fixed=TRUE)){oldpath <- paste0(oldpath,.Platform$path.sep,pandocpath)}
oldpath
!grepl(pandocpath,oldpath,fixed=TRUE)
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
ls()
library(devtools)
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/default_setup.R')
library(devtools)
load_all()
library(adapr)
dir.create(dirname(options.site),recursive=TRUE)
options.site <- file.path(path.expand.2("~"),"ProjectPaths", option.file)
option.file <- "adapr_options.csv"
options.site <- file.path(path.expand.2("~"),"ProjectPaths", option.file)
dir.create(dirname(options.site),recursive=TRUE)
load_all()
library(adapr)
temp <- numeric(0)
temp
paste(temp,"hi")
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
load_all()
library(adapr)
try(stop())
source('~/Documents/Projects/adapr/R/default_setup.R')
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/default_setup.R')
load_all()
library(adapr)
? dir.exists
version()
citation()
version
version$arch
version$major +version$minor
as.numeric(version$major) +as.numeric(version$minor)
as.numeric(version$major) +as.numeric(version$minor)/10
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
set_adapr_options("git"=="FALSE")
set_adapr_options("git","FALSE")
set_adapr_options("git","TRUE")
load_all()
library(adapr)
get_adapr_options
path.expand.2("~")
source('~/Documents/Projects/adapr/R/default_setup.R')
load_all()
library(adapr)
get_adapr_options()
source('~/Documents/Projects/adapr/R/create_markdown.R')
q()
library(adapr)
load_all()
library(devtools)
load_all()
library(adapr)
library(adapr)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"examine_data.R"
project.id <- "OAH_Replicating"
source_info <- create_source_file_dir(source.description="reads data")
rm(list=ls())
load_all()
load_all()
library(devtools)
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"examine_data.R"
project.id <- "OAH_Replicating"
source_info <- create_source_file_dir(source.description="reads data")
write(as.data.frame(session_info()$packages),file.path(source_info$source.support.dir,"package_info.csv"))
as.data.frame(session_info()$packages)
temp <- as.data.frame(session_info()$packages)
class(temp)
file.path(source_info_arg$source.support.dir,"package_info.csv")
write.csv(as.data.frame(session_info()$packages),file.path(source_info$source.support.dir,"package_info.csv"))
q()
library(devtools)
load_all()
library(adapr)
source('~/Documents/Projects/OAH_Replicating/Programs/examine_data.R')
dependency.out <- finalize_dependency()
library(adapr)
adapr21()
library(devtools)
load_all()
library(adapr)
load.source.directory
library(adapr)
load_all()
library(adapr)
create_program_graph("Gerken_234")
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("Gerken_234")
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("Gerken_234")
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("Gerken_234")
create_program_graph("test_adapr")
create_program_graph("adaprHome")
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("adaprHome")
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("adaprHome")
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("adaprHome")
shiny::runApp('inst/adapr21')
load_all()
library(adapr)
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
load_all()
library(adapr)
q()
library(adapr)
adapr21()
library(devtools)
load_all()
adapr21()
q()
library(devtools)
load_all()
library(adapr)
adapr21()
install.packages("car")
install.packages("pbkrtest")
install.packages("~/Downloads/pbkrtest_0.4-6.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/pbkrtest_0.4-6.tar.gz", repos = NULL, type = "source")
redirect.tree
library(devtools)
ls()
load_all()
load_all()
ls()
redirect.tree
redirect.tree
load_all()
library(adapr)
shiny::runApp('inst/adapr21')
source('~/Documents/Projects/adapr/R/plant_tree.R')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
ifelse(nrow(get_orchard())==0,"Configure Project Directories.","Waiting to create project.")
shiny::runApp('inst/adapr21')
library(adapr)
default.adapr.setup()
