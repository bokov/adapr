paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
}
create_markdown
create_markdown()
create_markdown <- function(source_info0=source_info,style="html_document",destination=source_info$analysis.dir){
target.dir <- source_info0$anaysis.dir
target.file <- file.path(target.dir,paste0(source_info$file$file,"md"))
#if(file.exists()){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",source_info0$source.file,source_info$description),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.Date()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
}
create_markdown()
system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
author
create_markdown()
create_markdown <- function(source_info0=source_info,style="html_document",destination=source_info$analysis.dir){
target.dir <- source_info0$anaysis.dir
target.file <- file.path(target.dir,paste0(source_info$file$file,"md"))
#if(file.exists()){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",source_info0$source.file,source_info$description),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.Date()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
}
create_markdown()
source_info0=source_info
style="html_document"
target.dir <- source_info0$anaysis.dir
target.file <- file.path(target.dir,paste0(source_info$file$file,"md"))
#if(file.exists()){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",source_info0$source.file,source_info$description),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.Date()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
start.lines.generic
target.file
target.dir <- source_info0$anaysis.dir
target.file <- file.path(target.dir,paste0(source_info0$file$file,"md"))
#if(file.exists()){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",source_info0$source.file,source_info$description),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.Date()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
target.file
target.dir=source_info$analysis.dir
target.file <- file.path(target.dir,paste0(source_info0$file$file,"md"))
#if(file.exists()){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",source_info0$source.file,source_info$description),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.Date()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
target.file <- file.path(target.dir,paste0(source_info0$file$file,"md"))
#if(file.exists()){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",source_info0$source.file,source_info0$description),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.Date()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
}
target.file <- file.path(target.dir,paste0(source_info0$file$file,"md"))
#if(file.exists()){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",source_info0$source.file,source_info0$description),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.Date()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
start.lines.generic
target.file <- file.path(target.dir,paste0(source_info0$file$file,"md"))
#if(file.exists()){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",source_info0$source.file,source_info0$description),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.Date()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
source_info0$source.file,source_info0$description
paste("title:",source_info0$source.file,source_info0$description)
source_info0$source.file
source_info
target.file <- file.path(target.dir,paste0(source_info0$file$file,"md"))
#if(file.exists()){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",source_info0$source.file$file,source_info0$description),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.Date()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
source_info
source_info0
paste("title:",source_info0$file$file,source_info0$description)
target.file <- file.path(target.dir,paste0(source_info0$file$file,"md"))
#if(file.exists()){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",paste0("\"",source_info0$file$file,source_info0$description,"\"")),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.Date()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
---
source_info0$description
target.file <- file.path(target.dir,paste0(source_info0$file$file,"md"))
#if(file.exists()){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",paste0("\"",source_info0$file$file,source_info0$file$description,"\"")),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.Date()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
target.file <- file.path(target.dir,paste0(source_info0$file$file,"md"))
#if(file.exists()){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",paste0("\"",source_info0$file$file," description: ",source_info0$file$description,"\"")),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.Date()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
system.time()
Sys.time()
target.file <- file.path(target.dir,paste0(source_info0$file$file,"md"))
#if(file.exists()){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",paste0("\"",source_info0$file$file,": ",source_info0$file$description,"\"")),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.time()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
---
source_info$file$file
create_markdown <- function(target.file=paste0(source_info$file$file,"md"),target.dir=source_info$analysis.dir,style="html_document"){
target.file <- file.path(target.dir,target.file)
if(file.exists(target.file)){return(FALSE)}
git_binary_path <- git_path(NULL)
author <- system2(git_binary_path, paste("config --global user.name"),stdout = TRUE)
start.lines.generic <- c("---",
paste("title:",paste0("\"",source_info0$file$file,": ",source_info0$file$description,"\"")),
paste("author:",paste0("\"",author,"\"")),
paste("date:",Sys.time()),
paste("output:",style),
"---",
"```{r}\n```")
start.lines.generic <- paste(start.lines.generic,collapse="\n")
write(start.lines.generic,target.file)
return(TRUE)
}
create_markdown()
Create.file.info
load_all()
q()
Read.cap
load_all()
library(devtools)
read_all()
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
load_all()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
create_markdown
source_info
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
create_markdown
library(devtools)
load_all()
library(adapr)
create_markdown()
create_markdown
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
load_all()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
create_markdown
q()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
q(0)
q()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
Read.cap
q()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
create_markdown
source_info
Read.cap
q()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
create_markdown
Read.cap
create_markdown()
q()
library(devtools)
load_all()
create_markdown
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
q()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
Render_Rmd
q()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
q()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
q()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
dependency.out <- finalize_dependency()
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
file.copy(source_info$rmdfile$fullname,file.path(source_info$results.dir,source_info$rmdfile$file),overwrite=TRUE)
file.path(source_info$results.dir,source_info$rmdfile$file)
file.copy(source_info$rmdfile$fullname,file.path(source_info$results.dir,source_info$rmdfile$file$file),overwrite=TRUE)
source_info$rmdfile
create_markdown
q()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
source_info$rmdfile
file.copy(source_info$rmdfile$fullname,file.path(source_info$results.dir,source_info$rmdfile$file$file),overwrite=TRUE)
file.copy(source_info$rmdfile$fullname,file.path(source_info$results.dir,source_info$rmdfile$file),overwrite=TRUE)
outputfile <- rmarkdown::render(file.path(source_info$results.dir,source_info$rmdfile$file))
Read.cap(source_info$rmdfile, I, source_info)
outfile <- Create.file.info(source_info$results.dir, basename(outputfile), paste("rendered Rmarkdown of", source_info$file$file))
Write.cap(NULL, outfile, I, source_info)
q()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
dependency.out <- finalize_dependency()
q()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
# End Program Body
dependency.out <- finalize_dependency()
source_info
create_markdown
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
# End Program Body
dependency.out <- finalize_dependency()
create_markdown
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
# End Program Body
dependency.out <- finalize_dependency()
source_info
load_all()
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
# End Program Body
dependency.out <- finalize_dependency()
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
# End Program Body
dependency.out <- finalize_dependency()
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
# End Program Body
dependency.out <- finalize_dependency()
q()
