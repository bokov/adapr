}
rm(list=ls())
set.seed( 2011 )
library(IT2)
library(plyr)
library(dplyr)
library(impute)
library(lcmm)
library(flexmix)
library(reshape2)
library(MplusAutomation)
library(doMC)
source.file <-"pcl_total_lcmm_prepost_fit_test.R"
project.id <- "Williams_PTSD"
source_info <- create.source.file.dir(project.id=project.id,source.file=source.file,get.project.path(project.id),
source.description="tests lcmm for robustness")
# Program body here
rout <- source_info$report
Get.file.info(source_info,path.grep="pcl_hockeystick.Rdata")
prere3 <- Load.branch("pcl_hockeystick.Rdata")
set.seed(2014)
prere <- prere3
pcl.model <- Load.branch("pcl_model.Rdata")
prere$Nightmares   <- ifelse(prere$NIGHTMARES=="Y",TRUE,FALSE)
prere$Avoid_situations <- ifelse(prere$AVOID_SITUATIONS=="Y",TRUE,FALSE)
prere$On_guard <- ifelse(prere$ON_GUARD=="Y",TRUE,FALSE)
prere$Detached <- ifelse(prere$DETACHED=="Y",TRUE,FALSE)
prere$Little_interest <- 1*ifelse(as.numeric(as.character(prere$LITTLE_INTEREST))>0,TRUE,FALSE)
prere$Feeling_down <- ifelse(as.numeric(as.character(prere$FEELING_DOWN))>0,TRUE,FALSE)
risk.matrix <- as.matrix(dplyr::select(prere,Nightmares,Avoid_situations,Detached,On_guard,Feeling_down,Little_interest))
pcl_predictions <- predict(pcl.model,newdata=prere)
colMeans(is.na(risk.matrix))
risk.matrix[rowMeans(is.na(risk.matrix))>0.75,] <- 0
bigMat.impute <- impute.knn(t(risk.matrix))
imputed <- t(bigMat.impute$data)
class(imputed) <- "logical"
imputed <- data.frame(imputed)
imputed$Little_interest <- 1*imputed$Little_interest
pcl_predictions <- predict(pcl.model,newdata=data.frame(imputed),se=TRUE,interval="prediction")
prere$pcl_pred2 <- pcl_predictions$fit[,"fit"]
prere$pcl_pred_se <- (pcl_predictions$fit[,"upr"]-pcl_predictions$fit[,"lwr"])/(2*1.96)
with(prere,plot(prere$pcl_pred2,prere$pcl_pred_se))
with(prere,plot(pcl_prediction,pcl_predictions$fit[,"fit"]))
for(i in 1:10){
x <- prere$pcl_prediction + rnorm(nrow(prere))*prere$pcl_pred_se
prere[[paste0("pcl_imp_",i)]] <- ifelse(x<17,17,ifelse(x>81,81,x))
}
addnoise <- function(x){
y <- x + rnorm(length(x))*7.555
y <- ifelse(y<17,17,ifelse(y>81,81,y))
return(y)
}
with(prere,plot(x,prere$pcl_prediction))
prere3 <- prere
file.info(list.files(source_info$data.dir,full.names=1))
preposts <- Read("DW0001_PCLS-C.csv","pre and post PCL")
preposts$pcldate <- as.Date(preposts$pcls_date,"%m/%d/%Y")
preposts$SID <- preposts$sid
pcl.time <- ddply(prere3,"SID",function(x){
data.frame(refdate = min(x$D_DEPART,na.rm=TRUE))
})
prere3 <- merge(prere3,pcl.time)
#pcls$D_EVENT <- as.Date(pcls$PCLC_date,"%m/%d/%y")
pclssimple <- subset(preposts,select=c("SID","PclsTot","pcldate","visit_type"))
pclssimple <- merge(pclssimple,pcl.time)
pclssimple$study_day <- as.numeric(pclssimple$pcldate - pclssimple$refdate)
#pclssimple$Time.span.days <-
ggplot(pclssimple,aes(x=study_day,fill=visit_type)) + geom_histogram()
ggplot(pclssimple,aes(x=study_day,y=PclsTot)) + geom_point()+geom_smooth()
with23 <- ddply(prere3,"SID",function(x){
data.frame(with3=(max(x$Time.order)>1))
})
max(prere3$TimeEarly)
prerewith3 <- subset(prere3,SID %in% subset(with23,with3==TRUE)$SID)
prerewith3$PclsTot <- prerewith3$pcl_prediction
prerewith3$visit_type <- as.character(prerewith3$Time.order)
alltimes <- rbind.fill(subset(prerewith3,select=c(c("SID","PclsTot","study_day","visit_type"))),
subset(pclssimple,select=c(c("SID","PclsTot","study_day","visit_type"))))
alltimes$visit_type <- as.factor(alltimes$visit_type)
Write(alltimes,"pcl_data.csv","bare bones data")
ggplot(alltimes,aes(x=study_day,fill=visit_type)) + geom_histogram()
ggplot(alltimes,aes(x=study_day,fill=visit_type,y=PclsTot)) + geom_point(aes(color=visit_type))
alltimes$PclsTot.Imp <- ifelse(alltimes$visit_type %in% 1:3,addnoise(alltimes$PclsTot),alltimes$PclsTot)
alltimesfirst <- ddply(Sortby(alltimes,"study_day"),c("SID","visit_type"),function(x){
x <- x[1,]
})
alltimesfirst$visit_type <- factor(alltimesfirst$visit_type,levels=c("Pre",1:6,"Post"))
for(i in 1:10){
alltimesfirst$PclsTot.Imp <- ifelse(alltimesfirst$visit_type %in% 1:3,addnoise(alltimesfirst$PclsTot),alltimesfirst$PclsTot)
dataout <- dcast(SID~visit_type,data=alltimesfirst,value.var="PclsTot.Imp")
names(dataout)[-1] <- paste0("visit_",names(dataout)[-1],"_PCL")
dataout2 <- dcast(SID~visit_type,data=alltimesfirst,value.var="study_day")
names(dataout2)[-1] <- paste0("visit_",names(dataout2)[-1],"_day")
dataout0 <- merge(dataout,dataout2)
Write(dataout0,paste0("imputed_pcl_",i,".csv"))
}
rm(list=ls())
set.seed( 2011 )
library(IT2)
library(plyr)
library(dplyr)
library(impute)
library(lcmm)
library(flexmix)
library(reshape2)
library(MplusAutomation)
library(doMC)
source.file <-"pcl_total_lcmm_prepost_fit_test.R"
project.id <- "Williams_PTSD"
source_info <- create.source.file.dir(project.id=project.id,source.file=source.file,get.project.path(project.id),
source.description="tests lcmm for robustness")
# Program body here
rout <- source_info$report
Get.file.info(source_info,path.grep="pcl_hockeystick.Rdata")
prere3 <- Load.branch("pcl_hockeystick.Rdata")
set.seed(2014)
prere <- prere3
pcl.model <- Load.branch("pcl_model.Rdata")
prere$Nightmares   <- ifelse(prere$NIGHTMARES=="Y",TRUE,FALSE)
prere$Avoid_situations <- ifelse(prere$AVOID_SITUATIONS=="Y",TRUE,FALSE)
prere$On_guard <- ifelse(prere$ON_GUARD=="Y",TRUE,FALSE)
prere$Detached <- ifelse(prere$DETACHED=="Y",TRUE,FALSE)
prere$Little_interest <- 1*ifelse(as.numeric(as.character(prere$LITTLE_INTEREST))>0,TRUE,FALSE)
prere$Feeling_down <- ifelse(as.numeric(as.character(prere$FEELING_DOWN))>0,TRUE,FALSE)
risk.matrix <- as.matrix(dplyr::select(prere,Nightmares,Avoid_situations,Detached,On_guard,Feeling_down,Little_interest))
pcl_predictions <- predict(pcl.model,newdata=prere)
colMeans(is.na(risk.matrix))
risk.matrix[rowMeans(is.na(risk.matrix))>0.75,] <- 0
bigMat.impute <- impute.knn(t(risk.matrix))
imputed <- t(bigMat.impute$data)
class(imputed) <- "logical"
imputed <- data.frame(imputed)
imputed$Little_interest <- 1*imputed$Little_interest
pcl_predictions <- predict(pcl.model,newdata=data.frame(imputed),se=TRUE,interval="prediction")
prere$pcl_pred2 <- pcl_predictions$fit[,"fit"]
prere$pcl_pred_se <- (pcl_predictions$fit[,"upr"]-pcl_predictions$fit[,"lwr"])/(2*1.96)
with(prere,plot(prere$pcl_pred2,prere$pcl_pred_se))
with(prere,plot(pcl_prediction,pcl_predictions$fit[,"fit"]))
for(i in 1:10){
x <- prere$pcl_prediction + rnorm(nrow(prere))*prere$pcl_pred_se
prere[[paste0("pcl_imp_",i)]] <- ifelse(x<17,17,ifelse(x>81,81,x))
}
addnoise <- function(x){
y <- x + rnorm(length(x))*7.555
y <- ifelse(y<17,17,ifelse(y>81,81,y))
return(y)
}
with(prere,plot(x,prere$pcl_prediction))
prere3 <- prere
file.info(list.files(source_info$data.dir,full.names=1))
preposts <- Read("DW0001_PCLS-C.csv","pre and post PCL")
preposts$pcldate <- as.Date(preposts$pcls_date,"%m/%d/%Y")
preposts$SID <- preposts$sid
pcl.time <- ddply(prere3,"SID",function(x){
data.frame(refdate = min(x$D_DEPART,na.rm=TRUE))
})
prere3 <- merge(prere3,pcl.time)
#pcls$D_EVENT <- as.Date(pcls$PCLC_date,"%m/%d/%y")
pclssimple <- subset(preposts,select=c("SID","PclsTot","pcldate","visit_type"))
pclssimple <- merge(pclssimple,pcl.time)
pclssimple$study_day <- as.numeric(pclssimple$pcldate - pclssimple$refdate)
#pclssimple$Time.span.days <-
ggplot(pclssimple,aes(x=study_day,fill=visit_type)) + geom_histogram()
ggplot(pclssimple,aes(x=study_day,y=PclsTot)) + geom_point()+geom_smooth()
with23 <- ddply(prere3,"SID",function(x){
data.frame(with3=(max(x$Time.order)>1))
})
max(prere3$TimeEarly)
prerewith3 <- subset(prere3,SID %in% subset(with23,with3==TRUE)$SID)
prerewith3$PclsTot <- prerewith3$pcl_prediction
prerewith3$visit_type <- as.character(prerewith3$Time.order)
alltimes <- rbind.fill(subset(prerewith3,select=c(c("SID","PclsTot","study_day","visit_type"))),
subset(pclssimple,select=c(c("SID","PclsTot","study_day","visit_type"))))
alltimes$visit_type <- as.factor(alltimes$visit_type)
Write(alltimes,"pcl_data.csv","bare bones data")
ggplot(alltimes,aes(x=study_day,fill=visit_type)) + geom_histogram()
ggplot(alltimes,aes(x=study_day,fill=visit_type,y=PclsTot)) + geom_point(aes(color=visit_type))
alltimes$PclsTot.Imp <- ifelse(alltimes$visit_type %in% 1:3,addnoise(alltimes$PclsTot),alltimes$PclsTot)
alltimesfirst <- ddply(Sortby(alltimes,"study_day"),c("SID","visit_type"),function(x){
x <- x[1,]
})
alltimesfirst$visit_type <- factor(alltimesfirst$visit_type,levels=c("Pre",1:6,"Post"))
for(i in 1:10){
alltimesfirst$PclsTot.Imp <- ifelse(alltimesfirst$visit_type %in% 1:3,addnoise(alltimesfirst$PclsTot),alltimesfirst$PclsTot)
dataout <- dcast(SID~visit_type,data=alltimesfirst,value.var="PclsTot.Imp")
names(dataout)[-1] <- paste0("visit_",names(dataout)[-1],"_PCL")
dataout2 <- dcast(SID~visit_type,data=alltimesfirst,value.var="study_day")
names(dataout2)[-1] <- paste0("visit_",names(dataout2)[-1],"_day")
dataout0 <- merge(dataout,dataout2)
Write(dataout0,paste0("imputed_pcl_",i,".csv"),row.names=FALSE)
}
shiny::runApp('inst/adapr21')
library(adapr)
devtools::use_vignette("ADAPR Vignette")
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(MatchIt)
library(Amelia)
library(Matching)
library(VarSummarize)
library(rtfR)
source.file <-"propensity_matching_revised.R"
project.id <- "Knudtson_197"
source_info <- create_source_file_dir(source.description="Matching")
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(MatchIt)
library(Amelia)
library(Matching)
library(VarSummarize)
library(rtfR)
source.file <-"propensity_matching_revised.R"
project.id <- "Knudtson_197"
source_info <- create_source_file_dir(source.description="Matching")
dir.exists("/Volumes/WORKING2/Projects/Hernandez/N2K")
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(MatchIt)
library(Amelia)
library(Matching)
library(VarSummarize)
library(rtfR)
source.file <-"propensity_matching_revised.R"
project.id <- "Knudtson_197"
source_info <- create_source_file_dir(source.description="Matching")
dir.exists("/Volumes/WORKING2/Projects/Goros/Knud")
# Program body here
frozen <- Load.branch("ReadingDataAndProcessing.R/frozen_new.Rdata")
matching <- subset(frozen,select=c('ID','AssistedHatching01','Age','EtiologyOfInfertility','Race','MaxFSH','Gravidity_num','FullTermBirths_num','PreTermBirths_num','Region','ReportingYear'))
sig.vars <- c('Age','EtiologyOfInfertility','Race','MaxFSH','Gravidity_num','FullTermBirths_num','PreTermBirths_num','Region','ReportingYear')
propensity01.formula <- as.formula(paste("AssistedHatching01 ~",paste(sig.vars,collapse="+")))
imputed <- amelia(matching,m=10,noms=c("EtiologyOfInfertility","Race","Region","AssistedHatching01","ReportingYear"))
source('/Volumes/WORKING2/Projects/Goros/Knudtson_197/Programs/propensity_matching_revised.r')
matched
out.fa <- summarize.data.frame(matched.data,as.factor(matched.data$AssistedHatching01),which(names(matched.data) %in% sig.vars))
out.fa
table(nonas2$Matched,nonas2$AssistedHatching01)
mat
addmargins(table(nonas2$Matched,nonas2$AssistedHatching01))
out.fa
q()
devtools::load_all()
Read
source('~/Documents/Projects/adapr/R/Read.R')
Read.cap
Graph
Write.cap
Create.file.info
devtools::load_all()
library(adapr)
library(adapr)
library(adapr)
AdaprApp()
adaprApp()
library(adapr)
library(adapr)
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/Condense_file_info.R')
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
source('~/Documents/Projects/adapr/R/get.fs.time.R')
library(adapr)
library(adapr)
source('~/Documents/Projects/adapr/R/git_add.R')
nchar("file0 <- file.path(si$project.path,project.directory.tree$analysis,"read_data.R")")
nchar("file0 <- file.path(si$project.path,project.directory.tree$analysis,\"read_data.R\")")
source('~/Documents/Projects/adapr/R/git.commit.R')
source('~/Documents/Projects/adapr/R/git_history_search.R')
source('~/Documents/Projects/adapr/R/get_project_info_si.R')
load_all()
library(devtools)
load_all()
source('~/Documents/Projects/adapr/R/run_Program.R')
project.directory.tree$analysis
library(adapr)
library(adapr)
library(adapr)
library(adapr)
adaprApp()
source.sync.si()
source.sync.si
ls()
rm(list=ls())
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/create_program_graph_2.R')
source('~/Documents/Projects/adapr/R/create_program_graph_2.R')
source('~/Documents/Projects/adapr/R/create_program_graph_2.R')
runApp('inst/adapr21')
runApp('inst/adapr21')
runApp('inst/adapr21')
project.directory.tree$results
results <- file.path(get.project.path(project.id),project.directory.tree$results,source.file)
results <- file.path(get.project.path(project.id),project.directory.tree$results,source.file)
?file.remove
source('~/Documents/Projects/adapr/R/run_Program.R')
inside.results <- list.files(results)
plant.tree
redirect.tree
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(rtfR)
library(VarSummarize)
library(car)
library(reshape2)
library(glmnet)
library(modelr)
library(xtable)
library(knitr)
library(pROC)
library(MatchIt)
library(Matching)
library(ggplot2)
source.file <-"propensity_matcher_imputed.R"
project.id <- "Williamson_PTSD2"
source_info <- create_source_file_dir(source.description="perform some regression")
# Program body here
covs <- Load.branch("all_predictors.Rdata")
drris <- Load.branch("drri.Rdata")
drris$SID <- drris$sid
temp <- load(file.path(source_info$data.dir,"imputed_trajClass.Rdata"))
classdata <- obj
#imputed_data.Rdata
temp <- load(file.path(source_info$data.dir,"imputed_data.Rdata"))
imputeddata <- obj
predata <- subset(imputeddata[[1]],select=c("SID","value"),variable=="VisitPre")
predata$PCLbaseline <- predata$value
covs_class <- subset(classdata,select=c("SID","className"))
covs_class <- merge(covs_class,drris,by="SID")
class.labels <- Load.branch("class_labels.Rdata")
covs_class$PCL_trajectory <- covs_class$className
covs <- merge(covs,covs_class,by="SID")
covs <- merge(covs,predata,by="SID")
covs$PCL_trajectory <- covs$className
with(covs,plot(PCLx,PCLbaseline))
#predictors <- c("DANGER_KILLED","DrricTot","Nchildren","Education.simple","mths_in_mil","nTimesDeployed","Enlisted","EXP_BLAST","KILLED_CHECKED")
predictors <- c("PCLbaseline","DANGER_KILLED","DrricTot", "DrriaTot" ,"DrridTot")
covs$lowHigh01 <- ifelse(covs$PCL_trajectory=="LowHigh",1,0)
covs.sub01 <- subset(covs,PCL_trajectory %in% c("LowHigh","LowLow"))
prediction <- as.formula(paste("lowHigh01 ~",paste(predictors,collapse="+")))
listDatafiles()
bloodsids <- Read("Subjects with Pre-Post DNA-RNA Samples.xlsx","patients w blood",sheet=1,as.is=TRUE)
covs.sub01$blood <- covs.sub01$SID %in% bloodsids$SubjectID
fisher.test(with(covs.sub01,table(lowHigh01,blood)))
covs.sub01 <- subset(covs.sub01,blood==TRUE)
glmout <- glm(prediction,data=covs.sub01,family="binomial")
#covs.sub01$Propensity <- predict(glmout,type="response")
preds <- add_predictions(covs.sub01,glmout)
ggplot(preds,aes(x=pred,fill=PCL_trajectory)) + geom_density(alpha=0.5) + ggtitle("Propensity Matching") + xlab("Propensity Measure")
S=predict(glmout,type="response")
roc<-AUC::roc(S, as.factor(covs.sub01[names(S),]$lowHigh01))
plot(roc, col="red")
title("ROC Curve Predicting LowHigh vs. Low Membership")
text(.15,.95,paste("AUC=",round(AUC::auc(roc),3)), col="red",cex=1.5)
propensity.formula <- prediction
predmatch <- subset(preds,!is.na(pred))
rr1 <- Match(Tr=predmatch$lowHigh01,X=predmatch$pred,replace=FALSE,caliper=1.5,M=2)
matching.data <- predmatch
#matching.data$Cohort01 <- ifelse(matching.data$Cohort=="Control group",0,1)
matched <- rr1$mdata
length(table(rr1$index.treated))
length(table(rr1$index.control))
# compute match index
match.index <- c(rr1$index.treated,rr1$index.control)
matched.participants <- predmatch$SID[match.index]
preds.matched <- subset(preds,SID %in% matched.participants)
mean(matched.participants %in% bloodsids$SubjectID)
ggplot(preds.matched,aes(x=pred,fill=PCL_trajectory)) + geom_density(alpha=0.5) + ggtitle("Propensity Matching") + xlab("Propensity Measure")
matchedout <- summarize.data.frame(preds.matched,outcome.=as.factor(preds.matched$className),columns.=which(names(preds.matched)%in% predictors))
allout <- summarize.data.frame(preds,outcome.=as.factor(preds$className),columns.=which(names(preds)%in% predictors))
rtfname <- make.rtf("matched_lowhigh")
temp.rtf <- R.table(table = matchedout$table[,1:5],
page.width = 8.5,
page.height = 11,
fontsize = 12,
filename = rtfname,
titlename = "Table 1.Matched Cohort",
subtitle = "",
column.align = c("L",rep("C",4)),
frontpage = TRUE,
initials = "JG",
orientation = "landscape")
temp.rtf <- R.table(table = allout$table[,1:5],
page.width = 8.5,
page.height = 11,
fontsize = 12,
filename = rtfname,
titlename = "Table 2. Original Cohort",
subtitle = "",
column.align = c("L",rep("C",4)),
frontpage = TRUE,
initials = "JG",
orientation = "landscape",rtf=temp.rtf)
# End Program Body
dependency.out <- finalize_dependency()
head(preds.matched)
dim(preds.matched)
head(imputeddata)
lapply(imputeddata,head)
avedat <- imputeddata[[1]]
avedat$PCL <- 0
for(i in 1:10){
avedat$PCL <- imputeddata[[i]]$value * 0.1 + avedat$PCL
}
head(preds.matched)
merger <- subset(preds.matched,select=c("SID","PCL_trajectory"))
merger <- merge(avedat$PCL,subset(preds.matched,select=c("SID","PCL_trajectory")))
dim(merger)
head(subset(preds.matched,select=c("SID","PCL_trajectory")))
sum(duplicated(preds.matched$SID))
avedat <- imputeddata[[1]]
avedat$PCL <- 0
for(i in 1:10){
avedat$PCL <- imputeddata[[i]]$value * 0.1 + avedat$PCL
}
merger <- merge(avedat,subset(preds.matched,select=c("SID","PCL_trajectory")))
dim(avedat)
dim(merger)
head(avedat)
head(merger)
ggplot(merger,aes(x=Time,y=PCL,group=SID))+geom_line()+facet_grid(.~PCL_trajectory)
ggplot(merger,aes(x=Time,y=PCL,group=SID))+geom_line()+facet_grid(.~PCL_trajectory)+geom_smooth()
ggplot(merger,aes(x=Time,y=PCL,group=SID))+geom_point()+facet_grid(.~PCL_trajectory)+geom_smooth()
ggplot(merger,aes(x=Time,y=PCL))+geom_point()+facet_grid(.~PCL_trajectory)+geom_smooth()
ggplot(merger,aes(x=Time,y=PCL,group=SID))+geom_point()+facet_grid(.~PCL_trajectory)
ggplot(merger,aes(x=Time,y=PCL,group=SID))+geom_line()+facet_grid(.~PCL_trajectory)
ggplot(merger,aes(x=Time,y=PCL,group=SID,color=SID))+geom_line()+facet_grid(.~PCL_trajectory)
ggplot(merger,aes(x=Time,y=PCL,group=SID,color=factor(SID)))+geom_line()+facet_grid(.~PCL_trajectory)
ggplot(merger,aes(x=Time,y=PCL,group=SID,color=factor(SID)))+geom_line()+facet_grid(.~PCL_trajectory)+
geom_point(show_guide = FALSE)
ggplot(merger,aes(x=Time,y=PCL,group=SID,color=factor(SID)))+geom_line()+facet_grid(.~PCL_trajectory)+
geom_line(show_guide = FALSE)
ggplot(merger,aes(x=Time,y=PCL,group=SID,color=factor(SID)))+geom_line()+facet_grid(.~PCL_trajectory)+
scale_fill_discrete(guide=FALSE)
ggplot(merger,aes(x=Time,y=PCL,group=SID,color=factor(SID)))+geom_line()+facet_grid(.~PCL_trajectory)+
scale_line_discrete(guide=FALSE)
ggplot(merger,aes(x=Time,y=PCL,group=SID,color=factor(SID)))+geom_line()+facet_grid(.~PCL_trajectory)+
scale_color_discrete(guide=FALSE)
ggplot(merger,aes(x=Time,y=PCL))+geom_point()+facet_grid(.~PCL_trajectory)+geom_smooth()
Graph("selected_sample.pdf")
print(temp1)
print(temp2)
dev.off()
temp1 <- ggplot(merger,aes(x=Time,y=PCL,group=SID,color=factor(SID)))+geom_line()+facet_grid(.~PCL_trajectory)+
scale_color_discrete(guide=FALSE)
temp2 <- ggplot(merger,aes(x=Time,y=PCL))+geom_point()+facet_grid(.~PCL_trajectory)+geom_smooth()
Graph("selected_sample.pdf")
print(temp1)
print(temp2)
dev.off()
showResults()
hist(imputeddata[[1]]$value)
hist(log(imputeddata[[1]]$value))
temp3 <- ggplot(merger,aes(x=PCL))+geom_histogram()+facet_grid(.~visit)
temp3
head(merger)
temp3 <- ggplot(merger,aes(x=PCL))+geom_histogram()+facet_grid(.~visit)
temp3 <- ggplot(merger,aes(x=PCL))+geom_histogram()+facet_grid(.~visit)
temp3
merger <- merge(avedat,subset(preds.matched,select=c("SID","visit","PCL_trajectory")))
temp1 <- ggplot(merger,aes(x=Time,y=PCL,group=SID,color=factor(SID)))+geom_line()+facet_grid(.~PCL_trajectory)+
scale_color_discrete(guide=FALSE)
temp2 <- ggplot(merger,aes(x=Time,y=PCL))+geom_point()+facet_grid(.~PCL_trajectory)+geom_smooth()
temp3 <- ggplot(merger,aes(x=PCL))+geom_histogram()+facet_grid(.~visit)
temp3
head(merger)
temp3 <- ggplot(merger,aes(x=PCL))+geom_histogram()+facet_grid(.~variable)
head(merger)
temp3 <- ggplot(merger,aes(x=PCL))+geom_histogram()
temp3
temp3 <- ggplot(merger,aes(x=PCL))+geom_histogram()+facet_grid(.~variable)
print(temp3)
temp4 <- ggplot(merger,aes(x=PCL))+geom_histogram()+scale_x_log10()+facet_grid(.~variable)
Graph("selected_sample.pdf","lines for selected sample",height=8)
temp3 <- ggplot(merger,aes(x=PCL))+geom_histogram()+facet_grid(.~variable)
temp4 <- ggplot(merger,aes(x=PCL))+geom_histogram()+scale_x_log10()+facet_grid(.~variable)
print(temp1)
print(temp2)
dev.off()
showResults()
temp3 <- ggplot(merger,aes(x=PCL))+geom_histogram()+facet_grid(.~variable)
temp4 <- ggplot(merger,aes(x=PCL))+geom_histogram()+scale_x_log10()+facet_grid(.~variable)
Graph("selected_sample.pdf","lines for selected sample",height=8,width=12)
temp3 <- ggplot(merger,aes(x=PCL))+geom_histogram()+facet_grid(.~variable)
temp4 <- ggplot(merger,aes(x=PCL))+geom_histogram()+scale_x_log10()+facet_grid(.~variable)
print(temp1)
print(temp2)
dev.off()
Graph("selected_sample.pdf","lines for selected sample",height=8,width=12)
print(temp1)
print(temp2)
print(temp3)
print(temp4)
dev.off()
ls()
rm(list=ls())
