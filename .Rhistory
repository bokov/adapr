edgelist$target <- as.character(edgelist$target)
sankeyPlot <- rCharts$new()
sankeyPlot$setLib("http://timelyportfolio.github.io/rCharts_d3_sankey/libraries/widgets/d3_sankey")
sankeyPlot$set(data = edgelist, nodeWidth = 15, nodePadding = 10,
layout = 32, width = graph.width, height = graph.height)
project.graph.file <- file.path(source_info$results.dir,
"full_networks.html")
sankeyPlot$save(project.graph.file, cdn = TRUE)
support.names <- subset(project.info$all.files, description ==
"Support file")$fullname.abbr
edgelist <- subset(edgelist, !(source %in% support.names) &
!grepl("Session_info", edgelist$source, fixed = TRUE) &
!grepl("Session_info", edgelist$target, fixed = TRUE))
sankeyPlot <- rCharts$new()
sankeyPlot$setLib("http://timelyportfolio.github.io/rCharts_d3_sankey/libraries/widgets/d3_sankey")
sankeyPlot$set(data = edgelist, nodeWidth = 15, nodePadding = 10,
layout = 32, width = graph.width, height = graph.height)
# END: Make Sankey Plot
reduced.project.graph.file <- file.path(source_info$results.dir,
"reduced_networks.html")
sankeyPlot$save(reduced.project.graph.file, cdn = TRUE)
programs <- subset(project.info$tree, !duplicated(source.file),
select = c("source.file", "source.file.path", "source.file.description"))
programs$source.file.fullname <- file.path(programs$source.file.path,
programs$source.file)
run.times <- ddply(project.info$tree, "source.file", function(x) {
last.run.time <- max(as.POSIXct(x$target.mod.time) -
as.POSIXct(x$source.run.time), na.rm = TRUE)
return(data.frame(last.run.time.sec = last.run.time))
})
tab.out <- merge(programs, run.times, by = "source.file")
tab.out$source.link <- make.hyperlink(tab.out$source.file.fullname,
tab.out$source.file)
sorted.names <- V(project.info$graph)$file[topological.sort(project.info$graph)]
sorted.names <- sorted.names[sorted.names %in% tab.out$source.file]
tab.out <- tab.out[match(sorted.names, tab.out$source.file),
]
program.split <- split(project.info$tree, project.info$tree$source.file)
summaries.out <- lapply(program.split, program.io.table)
outputs <- list()
for (source.iter in names(summaries.out)) {
temp <- summaries.out[[source.iter]]
temp$File <- make.hyperlink(temp$Fullname, temp$File)
outputs[[source.iter]] <- subset(temp, select = c("IO",
"File", "Description"))
}
for (namer in names(outputs)){
write(paste("#",namer,"\n"),file.path(targetdirectory,targetfile),append=TRUE)
write(kable(outputs[[namer]]),file.path(targetdirectory,targetfile),append=TRUE)
}
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
tabtopander
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
tab.out0 <- subset(tab.out,select=c("source.link","source.file.description","last.run.time.sec"))
#rownames(tab.out0) <- 1:nrow(tab.out0)
tabtopander <- tab.out0
rownames(tabtopander) <<- 1:nrow(tabtopander)
tabtopander <- tab.out0
rownames(tabtopander) <- 1:nrow(tabtopander)
write("\n",file.path(targetdirectory,targetfile),append=TRUE)
write(kable(tabtopander),file.path(targetdirectory,targetfile),append=TRUE)
write("\n",file.path(targetdirectory,targetfile),append=TRUE)
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
? kabel
?kable
write(kable(tabtopander,align="c"),file.path(targetdirectory,targetfile),append=TRUE)
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
library(xtable)
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
load_all()
load_all()
library(adapr)
source('~/Documents/Projects/testadapr/Programs/read_data.R')
---
source('~/Documents/Projects/testadapr/Programs/read_data.R')
output: html_document
library(knitr)
source('~/Documents/Projects/adapr/R/create_markdown.R')
source('~/Documents/Projects/adapr/R/create_markdown.R')
load_all()
library(adapr)
source('~/Documents/Projects/testadapr/Programs/read_data.R')
Render_Rmd
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data_2.R')
source('~/Documents/Projects/testadapr/Programs/read_data_2.R')
project.graph
outputs
source('~/Documents/Projects/testadapr/Programs/read_data_2.R')
source('~/Documents/Projects/testadapr/Programs/read_data_2.R')
source('~/Documents/Projects/testadapr/Programs/read_data_2.R')
{
library(pander)
library(devtools)
if(!require("rCharts")){install_github('rCharts','ramnathv')}
library(rCharts)
library(plyr)
si <- source_info
targetfile <- paste0("project_summary",".Rmd")
targetdirectory <- si$results.dir
create_markdown(target.file=targetfile,target.dir=targetdirectory,style="html_document",description="\n",si,overwrite=TRUE)
project.info <- get.project.info.si(source_info)
project.graph <- project.info$graph
library(pander)
library(devtools)
if(!require("rCharts")){install_github('rCharts','ramnathv')}
library(rCharts)
library(plyr)
si <- source_info
targetfile <- paste0("project_summary",".Rmd")
targetdirectory <- si$results.dir
create_markdown(target.file=targetfile,target.dir=targetdirectory,style="html_document",description="\n",si,overwrite=TRUE)
project.info <- get.project.info.si(source_info)
project.graph <- project.info$graph
si <- source_info
targetfile <- paste0("project_summary",".Rmd")
targetdirectory <- si$results.dir
create_markdown(target.file=targetfile,target.dir=targetdirectory,style="html_document",description="\n",si,overwrite=TRUE)
project.info <- get.project.info.si(si)
project.graph <- project.info$graph
# START Make Sankey Plot
E(project.graph)$weight = 0.1
edgelist <- get.data.frame(project.graph)
colnames(edgelist) <- c("source", "target", "value")
edgelist$source <- as.character(edgelist$source)
edgelist$target <- as.character(edgelist$target)
sankeyPlot <- rCharts$new()
sankeyPlot$setLib("http://timelyportfolio.github.io/rCharts_d3_sankey/libraries/widgets/d3_sankey")
sankeyPlot$set(data = edgelist, nodeWidth = 15, nodePadding = 10,
layout = 32, width = graph.width, height = graph.height)
project.graph.file <- file.path(source_info$results.dir,
"full_networks.html")
sankeyPlot$save(project.graph.file, cdn = TRUE)
support.names <- subset(project.info$all.files, description ==
"Support file")$fullname.abbr
edgelist <- subset(edgelist, !(source %in% support.names) &
!grepl("Session_info", edgelist$source, fixed = TRUE) &
!grepl("Session_info", edgelist$target, fixed = TRUE))
sankeyPlot <- rCharts$new()
sankeyPlot$setLib("http://timelyportfolio.github.io/rCharts_d3_sankey/libraries/widgets/d3_sankey")
sankeyPlot$set(data = edgelist, nodeWidth = 15, nodePadding = 10,
layout = 32, width = graph.width, height = graph.height)
# END: Make Sankey Plot
reduced.project.graph.file <- file.path(source_info$results.dir,
"reduced_networks.html")
sankeyPlot$save(reduced.project.graph.file, cdn = TRUE)
programs <- subset(project.info$tree, !duplicated(source.file),
select = c("source.file", "source.file.path", "source.file.description"))
programs$source.file.fullname <- file.path(programs$source.file.path,
programs$source.file)
run.times <- ddply(project.info$tree, "source.file", function(x) {
last.run.time <- max(as.POSIXct(x$target.mod.time) -
as.POSIXct(x$source.run.time), na.rm = TRUE)
return(data.frame(last.run.time.sec = last.run.time))
})
tab.out <- merge(programs, run.times, by = "source.file")
tab.out$source.link <- make.hyperlink(tab.out$source.file.fullname,
tab.out$source.file)
sorted.names <- V(project.info$graph)$file[topological.sort(project.info$graph)]
sorted.names <- sorted.names[sorted.names %in% tab.out$source.file]
tab.out <- tab.out[match(sorted.names, tab.out$source.file), ]
program.split <- split(project.info$tree, project.info$tree$source.file)
summaries.out <- lapply(program.split, program.io.table)
outputs <- list()
for (source.iter in names(summaries.out)) {
temp <- summaries.out[[source.iter]]
temp$File <- make.hyperlink(temp$Fullname, temp$File)
outputs[[source.iter]] <- subset(temp, select = c("IO",
"File", "Description"))
}
tab.out0 <- subset(tab.out,select=c("source.link","source.file.description","last.run.time.sec"))
#rownames(tab.out0) <- 1:nrow(tab.out0)
tabtopander <- tab.out0
rownames(tabtopander) <- 1:nrow(tabtopander)
names(tabtopander) <- c("Source","Description","Last run time (sec)")
write("\n",file.path(targetdirectory,targetfile),append=TRUE)
write(kable(tabtopander),file.path(targetdirectory,targetfile),append=TRUE)
write("\n",file.path(targetdirectory,targetfile),append=TRUE)
tabtopander <- data.frame(`Dependency Graph` = make.hyperlink(reduced.project.graph.file,"Project Graph"))
rownames(tabtopander) <- 1:nrow(tabtopander)
write("\n",file.path(targetdirectory,targetfile),append=TRUE)
write(kable(tabtopander),file.path(targetdirectory,targetfile),append=TRUE)
write("\n",file.path(targetdirectory,targetfile),append=TRUE)
for (namer in names(outputs)){
write(paste("#",namer,"\n"),file.path(targetdirectory,targetfile),append=TRUE)
write(kable(outputs[[namer]]),file.path(targetdirectory,targetfile),append=TRUE)
}
rmarkdown::render(file.path(targetdirectory,targetfile))
load_all()
library(adapr)
source('~/Documents/Projects/testadapr/Programs/read_data_2.R')
load_all()
library(adapr)
source('~/Documents/Projects/testadapr/Programs/read_data.R')
source('~/Documents/Projects/testadapr/Programs/read_data_2.R')
load_all()
library(adapr)
source('~/Documents/Projects/testadapr/Programs/read_data_2.R')
shinyTree()
load_all()
library(adapr)
adapr::shinyTree()
q()
load_all()
library(devtools)
load_all()
library(adapr)
adapr::shinyTree()
sessionInfo()
shiny::runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
source_info
shiny::runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
load_all()
adapr::shinyTree()
shinyTree()
shinyTree
load_all()
library(adapr)
adapr::shinyTree()
16+6+8+8
adapr::shinyTree()
get.orchard()
get_orchard()
get_orchard
}
shiny::runApp('inst/shinyApp')
shiny::runApp('inst/shinyApp')
plant.orchard()
plant.orchard
get_orchard
plant.tree()
plant.tree
first.project <- function(project.path="",publish.path=""){
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
project.id <- "adaprHome"
if(!file.exists(orchard.site)){
# Create orchard
plant.orchard()
project.path <- file.path(project.path,project.id)
publish.path <- file.path(swap.directory,project.id)
head.orchard <- data.frame(project.id=project.id,project.path=project.path,swap.directory=publish.path)
write.csv(head.orchard,orchard.site,row.names=FALSE)
return(TRUE)
}
return(FALSE)
}
first.project("/Users/Gelfond/Documents/Projects","/Users/Gelfond/Documents/Projects/Swap")
first.project <- function(project.path="",publish.path=""){
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
project.id <- "adaprHome"
if(!file.exists(orchard.site)){
# Create orchard
plant.orchard()
project.path <- file.path(project.path,project.id)
publish.path <- file.path(publish.path,project.id)
head.orchard <- data.frame(project.id=project.id,project.path=project.path,swap.directory=publish.path)
write.csv(head.orchard,orchard.site,row.names=FALSE)
return(TRUE)
}
return(FALSE)
}
first.project("/Users/Gelfond/Documents/Projects","/Users/Gelfond/Documents/Projects/Swap")
plant.tree
first.project <- function(project.path="",publish.path=""){
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
project.id <- "adaprHome"
if(!file.exists(orchard.site)){
# Create orchard
plant.orchard()
project.path <- file.path(project.path,project.id)
publish.path <- file.path(publish.path,project.id)
plant.tree(project.id,project.path,publish.path)
return(TRUE)
}
return(FALSE)
}
first.project("/Users/Gelfond/Documents/Projects","/Users/Gelfond/Documents/Projects/Swap")
first.project <- function(project.path="",publish.path=""){
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
project.id <- "adaprHome"
if(!file.exists(orchard.site)){
# Create orchard
plant.orchard()
plant.tree(project.id,project.path,publish.path)
return(TRUE)
}
return(FALSE)
}
first.project("/Users/Gelfond/Documents/Projects","/Users/Gelfond/Documents/Projects/Swap")
plant.tree
plant.tree <- function(project.id,project.path,swap.directory){
project.path <- file.path(project.path,project.id)
swap.directory <- file.path(swap.directory,project.id)
empty.orchard <- data.frame(project.id=project.id,project.path=project.path,swap.directory=swap.directory)
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
if(!file.exists(orchard.site)){plant.orchard()}
all.orchards <- get_orchard()
if(project.id %in% all.orchards$project.id){
print("Project Exists")
return(FALSE)
}else{
orchards.old <- read.csv(orchard.site,as.is=TRUE)
write.csv(rbind(orchards.old,empty.orchard),orchard.site,row.names=FALSE)
dir.create(swap.directory)
dir.create(project.path)
dir.create(file.path(project.path,project.directory.tree$analysis))
dir.create(file.path(project.path,project.directory.tree$data))
sprout.program(project.id,source.file.name=NA,description="",seed=2011,capture.load.command="library(adapr)",controller=TRUE)
test <- sprout.program(project.id,source.file.name="read_data.R",description="reads data",seed=2011,capture.load.command="library(adapr)",controller=FALSE)
try({
clean_source(file.path(project.path,project.directory.tree$analysis,"read_data.R"),quiet=TRUE)
})
if(!test){
# revert to old orchard if failure
write.csv(orchards.old,orchard.site,row.names=FALSE)
}
return(test)
}
}
first.project <- function(project.path="",publish.path=""){
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
project.id <- "adaprHome"
if(!file.exists(orchard.site)){
# Create orchard
plant.orchard()
plant.tree(project.id,project.path,publish.path)
return(TRUE)
}
return(FALSE)
}
first.project("/Users/Gelfond/Documents/Projects","/Users/Gelfond/Documents/Projects/Swap")
#' Create project hub files in root directory
#' @return logical for succesful creation or not
#' @export
#'
plant.orchard <- function(){
#
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
if(!file.exists(orchard.site)){
dir.create(file.path(path.expand.2("~"),"ProjectPaths"))
empty.orchard <- data.frame(project.id="",project.path="",swap.directory="")[-1,]
write.csv(empty.orchard,orchard.site,row.names=FALSE)
return(TRUE)
}
return(FALSE)
}
#' Create first project
#' @param project.path Path where first project will go
#' @param publish.path Path to share project results
#' @return logical for succesful creation or not
#' @export
#'
first.project <- function(project.path="",publish.path=""){
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
project.id <- "adaprHome"
if(!file.exists(orchard.site)){
# Create orchard
plant.orchard()
plant.tree(project.id,project.path,publish.path)
return(TRUE)
}
return(FALSE)
}
first.project("/Users/Gelfond/Documents/Projects","/Users/Gelfond/Documents/Projects/Swap")
plant.tree
load_all()
library(adapr)
sessionInfo()
plant.tree
plant.orchard
first.project("/Users/Gelfond/Documents/Projects","/Users/Gelfond/Documents/Projects/Swap")
project.path <- "/Users/Gelfond/Documents/Projects","/Users/Gelfond/Documents/Projects/Swap"
publish.path <- "/Users/Gelfond/Documents/Projects","/Users/Gelfond/Documents/Projects/Swap"
project.path <- "/Users/Gelfond/Documents/Projects"
publish.path <- "/Users/Gelfond/Documents/Projects/Swap"
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
!file.exists(orchard.site)
project.path <- "/Users/Gelfond/Documents/Projects"
publish.path <- "/Users/Gelfond/Documents/Projects/Swap"
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
project.id <- "adaprHome"
if(!file.exists(orchard.site)){
# Create orchard
plant.orchard()
}
plant.tree(project.id,project.path,publish.path)
project.path <- "/Users/Gelfond/Documents/Projects"
publish.path <- "/Users/Gelfond/Documents/Projects/Swap"
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
project.id <- "adaprHome"
if(!file.exists(orchard.site)){
# Create orchard
plant.orchard()
plant.tree(project.id,project.path,publish.path)
return(TRUE)
}
file.exists(orchard.site)
project.path
publish.path
plant.tree
project.path <- "/Users/Gelfond/Documents/Projects"
publish.path <- "/Users/Gelfond/Documents/Projects/Swap"
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
project.id <- "adaprHome"
file.exists(orchard.site)
plant.orchard()
plant.tree(project.id,project.path,publish.path)
project.path <- "/Users/Gelfond/Documents/Projects"
publish.path <- "/Users/Gelfond/Documents/Projects/Swap"
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
project.id <- "adaprHome"
plant.orchard()
plant.tree
sprout.program
get.project.path("adaprHome")
get.project.path
get.project.path
load_all()
library(adapr)
get.project.path
project.path <- "/Users/Gelfond/Documents/Projects"
publish.path <- "/Users/Gelfond/Documents/Projects/Swap"
orchard.site <- file.path(path.expand.2("~"),"ProjectPaths","projectid_2_directory_adapr.csv")
project.id <- "adaprHome"
if(!file.exists(orchard.site)){
# Create orchard
plant.orchard()
plant.tree(project.id,project.path,publish.path)
return(TRUE)
}
shinyTree()
? setup
Sys.getenv()
set_path
source('~/Documents/Projects/adapr/R/get.orchard.R')
first.project()
system.file
options.site0 <- system.file('adapr_options.csv',package='adapr')
options.site0
? system.file
load_all()
load_all()
library(adapr)
system.file('adapr_options.csv',package='adapr')
option.file <- "adapr_options.csv"
options.site <- file.path(path.expand.2("~"),"ProjectPaths", option.file)
if(!file.exists(options.site)){
options.site0 <- system.file(option.file,package='adapr')
file.copy(options.site0,options.site)
}
option.data <- read.csv(options.site,as.is=TRUE)
option.data
getEnv()
exists("source_info")
exists("temp")
rm(temp)
exists("temp")
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(knitr)
source.file <-"read_data_2.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads more data")
adapr::shinyTree()
source_info
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(knitr)
source.file <-"read_data_2.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads more data")
sessionInfo()
git2r
detach("package:IT2",unload=TRUE)
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(knitr)
source.file <-"read_data_2.R"
project.id <- "testadapr"
source_info <- create_source_file_dir(source.description="reads more data")
# Program body here
get.project.path
get_orchard()
adapr::shinyTree()
load_all()
library(adapr)
library(adapr)
load_all()
library(adapr)
adapr::shinyTree()
adapr::shinyTree()
