source('~/Documents/Projects/adapr/R/Check_file_hash.R')
Read()
Read
? graphics::plot
? na.exclude
library(adapr)
? requireNamespace
library(adapr)
library(adapr)
library(adapr)
? as_data_frame
?? as_data_frame
library(adapr)
source('~/Documents/Projects/adapr/R/create_program_graph_2.R')
?requireNamespace
library(adapr)
? unit
library(adapr)
? stats
plant.tree
? write.csv
library(devtools)
load_all()
library(adapr)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(rtfR)
library(VarSummarize)
library(car)
library(reshape2)
library(glmnet)
library(modelr)
library(xtable)
library(knitr)
library(pROC)
library(MatchIt)
library(Matching)
source.file <-"propensity_matcher.R"
project.id <- "Williamson_PTSD2"
source_info <- create_source_file_dir(source.description="perform some regression")
# Program body here
covs <- Load.branch("all_predictors.Rdata")
drris <- Load.branch("drri.Rdata")
drris$SID <- drris$sid
temp <- load(file.path(source_info$data.dir,"imputed_trajClass.Rdata"))
classdata <- obj
#imputed_data.Rdata
temp <- load(file.path(source_info$data.dir,"imputed_data.Rdata"))
imputeddata <- obj
predata <- subset(imputeddata[[1]],select=c("SID","value"),variable=="VisitPre")
predata$PCLbaseline <- predata$value
covs_class <- subset(classdata,select=c("SID","className"))
covs_class <- merge(covs_class,drris,by="SID")
class.labels <- Load.branch("class_labels.Rdata")
covs_class$PCL_trajectory <- covs_class$className
covs <- merge(covs,covs_class,by="SID")
covs <- merge(covs,predata,by="SID")
covs$PCL_trajectory <- covs$className
with(covs,plot(PCLx,PCLbaseline))
#predictors <- c("DANGER_KILLED","DrricTot","Nchildren","Education.simple","mths_in_mil","nTimesDeployed","Enlisted","EXP_BLAST","KILLED_CHECKED")
predictors <- c("PCLbaseline","DANGER_KILLED","DrricTot", "DrriaTot" ,"DrridTot")
covs$lowHigh01 <- ifelse(covs$PCL_trajectory=="LowHigh",1,0)
covs.sub01 <- subset(covs,PCL_trajectory %in% c("LowHigh","LowLow"))
prediction <- as.formula(paste("lowHigh01 ~",paste(predictors,collapse="+")))
bloodsids <- Read("Subjects with Pre-Post Deployment Samples - PRELIMINARY November 1 2016.xlsx","patients w blood",sheet=1,as.is=TRUE)
covs.sub01$blood <- covs.sub01$SID %in% bloodsids$SubjectID
fisher.test(with(covs.sub01,table(lowHigh01,blood)))
covs.sub01 <- subset(covs.sub01,blood==TRUE)
glmout <- glm(prediction,data=covs.sub01,family="binomial")
#covs.sub01$Propensity <- predict(glmout,type="response")
preds <- add_predictions(covs.sub01,glmout)
ggplot(preds,aes(x=pred,fill=PCL_trajectory)) + geom_density(alpha=0.5) + ggtitle("Propensity Matching") + xlab("Propensity Measure")
S=predict(glmout,type="response")
roc<-AUC::roc(S, as.factor(covs.sub01[names(S),]$lowHigh01))
plot(roc, col="red")
title("ROC Curve Predicting LowHigh vs. Low Membership")
text(.15,.95,paste("AUC=",round(AUC::auc(roc),3)), col="red",cex=1.5)
propensity.formula <- prediction
predmatch <- subset(preds,!is.na(pred))
rr1 <- Match(Tr=predmatch$lowHigh01,X=predmatch$pred,replace=FALSE,caliper=00.3,M=2)
matching.data <- predmatch
#matching.data$Cohort01 <- ifelse(matching.data$Cohort=="Control group",0,1)
matched <- rr1$mdata
length(table(rr1$index.treated))
length(table(rr1$index.control))
# compute match index
match.index <- c(rr1$index.treated,rr1$index.control)
matched.participants <- predmatch$SID[match.index]
preds.matched <- subset(preds,SID %in% matched.participants)
mean(matched.participants %in% bloodsids$SubjectID)
ggplot(preds.matched,aes(x=pred,fill=PCL_trajectory)) + geom_density(alpha=0.5) + ggtitle("Propensity Matching") + xlab("Propensity Measure")
matchedout <- summarize.data.frame(preds.matched,outcome.=as.factor(preds.matched$className),columns.=which(names(preds.matched)%in% predictors))
allout <- summarize.data.frame(preds,outcome.=as.factor(preds$className),columns.=which(names(preds)%in% predictors))
rtfname <- make.rtf("matched_lowhigh")
temp.rtf <- R.table(table = matchedout$table[,1:5],
page.width = 8.5,
page.height = 11,
fontsize = 12,
filename = rtfname,
titlename = "Table 1.Matched Cohort",
subtitle = "",
column.align = c("L",rep("C",4)),
frontpage = TRUE,
initials = "JG",
orientation = "landscape")
temp.rtf <- R.table(table = allout$table[,1:5],
page.width = 8.5,
page.height = 11,
fontsize = 12,
filename = rtfname,
titlename = "Table 2. Original Cohort",
subtitle = "",
column.align = c("L",rep("C",4)),
frontpage = TRUE,
initials = "JG",
orientation = "landscape",rtf=temp.rtf)
ggplot(preds,aes(x=pred,fill=PCL_trajectory)) + geom_density(alpha=0.5) + ggtitle("Propensity Matching") + xlab("Propensity Measure")
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(rtfR)
library(VarSummarize)
library(car)
library(reshape2)
library(glmnet)
library(modelr)
library(xtable)
library(knitr)
library(pROC)
library(MatchIt)
library(Matching)
library(ggplot2)
source.file <-"propensity_matcher.R"
project.id <- "Williamson_PTSD2"
source_info <- create_source_file_dir(source.description="perform some regression")
# Program body here
covs <- Load.branch("all_predictors.Rdata")
drris <- Load.branch("drri.Rdata")
drris$SID <- drris$sid
temp <- load(file.path(source_info$data.dir,"imputed_trajClass.Rdata"))
classdata <- obj
#imputed_data.Rdata
temp <- load(file.path(source_info$data.dir,"imputed_data.Rdata"))
imputeddata <- obj
predata <- subset(imputeddata[[1]],select=c("SID","value"),variable=="VisitPre")
predata$PCLbaseline <- predata$value
covs_class <- subset(classdata,select=c("SID","className"))
covs_class <- merge(covs_class,drris,by="SID")
class.labels <- Load.branch("class_labels.Rdata")
covs_class$PCL_trajectory <- covs_class$className
covs <- merge(covs,covs_class,by="SID")
covs <- merge(covs,predata,by="SID")
covs$PCL_trajectory <- covs$className
with(covs,plot(PCLx,PCLbaseline))
#predictors <- c("DANGER_KILLED","DrricTot","Nchildren","Education.simple","mths_in_mil","nTimesDeployed","Enlisted","EXP_BLAST","KILLED_CHECKED")
predictors <- c("PCLbaseline","DANGER_KILLED","DrricTot", "DrriaTot" ,"DrridTot")
covs$lowHigh01 <- ifelse(covs$PCL_trajectory=="LowHigh",1,0)
covs.sub01 <- subset(covs,PCL_trajectory %in% c("LowHigh","LowLow"))
prediction <- as.formula(paste("lowHigh01 ~",paste(predictors,collapse="+")))
bloodsids <- Read("Subjects with Pre-Post Deployment Samples - PRELIMINARY November 1 2016.xlsx","patients w blood",sheet=1,as.is=TRUE)
covs.sub01$blood <- covs.sub01$SID %in% bloodsids$SubjectID
fisher.test(with(covs.sub01,table(lowHigh01,blood)))
covs.sub01 <- subset(covs.sub01,blood==TRUE)
glmout <- glm(prediction,data=covs.sub01,family="binomial")
#covs.sub01$Propensity <- predict(glmout,type="response")
preds <- add_predictions(covs.sub01,glmout)
ggplot(preds,aes(x=pred,fill=PCL_trajectory)) + geom_density(alpha=0.5) + ggtitle("Propensity Matching") + xlab("Propensity Measure")
S=predict(glmout,type="response")
roc<-AUC::roc(S, as.factor(covs.sub01[names(S),]$lowHigh01))
plot(roc, col="red")
title("ROC Curve Predicting LowHigh vs. Low Membership")
text(.15,.95,paste("AUC=",round(AUC::auc(roc),3)), col="red",cex=1.5)
propensity.formula <- prediction
predmatch <- subset(preds,!is.na(pred))
rr1 <- Match(Tr=predmatch$lowHigh01,X=predmatch$pred,replace=FALSE,caliper=00.3,M=2)
matching.data <- predmatch
#matching.data$Cohort01 <- ifelse(matching.data$Cohort=="Control group",0,1)
matched <- rr1$mdata
length(table(rr1$index.treated))
length(table(rr1$index.control))
# compute match index
match.index <- c(rr1$index.treated,rr1$index.control)
matched.participants <- predmatch$SID[match.index]
preds.matched <- subset(preds,SID %in% matched.participants)
mean(matched.participants %in% bloodsids$SubjectID)
ggplot(preds.matched,aes(x=pred,fill=PCL_trajectory)) + geom_density(alpha=0.5) + ggtitle("Propensity Matching") + xlab("Propensity Measure")
source('~/Documents/Projects/Williamson_PTSD2/Programs/propensity_matcher_imputed.R')
showResults()
source('~/Documents/Projects/Williamson_PTSD2/Programs/propensity_matcher_imputed.R')
source('~/Documents/Projects/Williamson_PTSD2/Programs/propensity_matcher_imputed.R')
shiny::runApp('~/Documents/Projects/adapr/inst/adapr21')
runApp('~/Documents/Projects/adapr/inst/adapr21')
get_orchard()
input <- list(project.id="adaprHome")
create_program_graph(input$project.id)
get.project.path(input$project.id)
project.id <- "adaprHome"
si <- pull_source_info(project.id)
projinfo <- get.project.info.si(si)
get.project.info.si
si <- pull_source_info(project.id)
projinfo <- get.project.info.si(si)
si
get.project.info.si
source_info <- is
source_info <- si
get.project.info.si
dependency.dir <- source_info$dependency.dir
trees <- Harvest.trees(dependency.dir)
Harvest.trees
dep.files <- list.files(dependency.dir,full.names=TRUE)
dep.files
trees <- NULL
if(length(dep.files)>0){
list.deps <- lapply(dep.files,read.dependency)
trees <- plyr::rbind.fill(list.deps)
trees <- plyr::rbind.fill(list.deps)
list.deps <- lapply(dep.files,read.dependency)
trees <- plyr::rbind.fill(list.deps)
head(trees)
dependency.dir <- source_info$dependency.dir
trees <- Harvest.trees(dependency.dir)
dependency.dir
dep.files <- list.files(dependency.dir,full.names=TRUE)
trees <- NULL
list.deps <- lapply(dep.files,read.dependency)
trees <- plyr::rbind.fill(list.deps)
project.id <-  list.deps[[1]]$project.id[1]
project.id
trees
load_all()
devtools::load_all()
library(devtools)
load_all()
library(devtools)
load_all()
library(adapr)
source('~/Documents/Projects/adaprHome/Programs/read_data.R')
dependency.out
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "adaprHome"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
Write(data.frame(x=rnorm(102),y=rnorm(102)),"from_read.Rdata")
#project.graph <- get.project.info.si(source_info)$graph
#temp <- plot(project.graph)
#as_data_frame(project)
# End Program Body
dependency.out <- finalize_dependency()
dependency.out
# read in dependency object from dependency.file in source_info
# return dependency object
require(rmarkdown)
current.dir <- getwd()
# Copy and render Rmd file
file.copy(source_info$rmdfile$fullname,file.path(source_info$results.dir,source_info$rmdfile$file),overwrite=TRUE)
if(!checkRmdMode()){
outputfile <- rmarkdown::render(file.path(source_info$results.dir,source_info$rmdfile$file))
outfile <- Create.file.info(source_info$results.dir, basename(outputfile), paste("rendered Rmarkdown of", source_info$file$file))
Write.cap(NULL, outfile, I, source_info)
}else{
outputfile <- gsub("Rmd","html",file.path(source_info$results.dir,source_info$rmdfile$file))
outfile <- Create.file.info(source_info$results.dir, basename(outputfile), paste("rendered Rmarkdown of", source_info$file$file))
if(!file.exists(outfile$fullname)){write(0,outfile$fullname)} # Write a stub for tracking
Write.cap(NULL, outfile, I, source_info)
}
Read.cap(source_info$rmdfile, I, source_info)
Write(sessionInfo(),paste0("Session_info_",source_info$file$db.name,".RObj"),paste0("sessionInfo for", source_info$file[["file"]]),save)
# Render the markdown
dependency.file <- file.path(source_info$dependency.dir,source_info$dependency.file)
dependency.out <- source_info$dependency$data
dependency.out <- subset(dependency.out,!is.na(dependency))
n.output.files <-	nrow(subset(dependency.out,dependency=="out"))
print(c("# of output files",n.output.files))
project.path <- dependency.out$project.path[1]
dependency.out$source.git <- NA
if(source_info$options$git){
try({
dependency.out$source.git <- paste(git.info(as.character(dependency.out$path[1]),file.path(dependency.out$source.file.path[1],dependency.out$source.file)[1])[1:5],collapse=" ")
})
}
dependency.out$source.mod.time <- as.character(file.info(file.path(dependency.out$source.file.path[1],dependency.out$source.file[1]))$mtime)
dependency.out$source.hash <-   Digest(file=file.path(dependency.out$source.file.path[1],dependency.out$source.file[1]),serialize=FALSE)
for(dep.row.iter in 1:nrow(dependency.out)){
target.file <- file.path(dependency.out$target.path[dep.row.iter],dependency.out$target.file[dep.row.iter])
#		print(target.file)
dependency.out$target.hash[dep.row.iter] <- Digest(file=as.character(target.file),serialize=FALSE)
dependency.out$target.mod.time[dep.row.iter] <- as.character(file.info(as.character(target.file))$mtime)
}
dependency.out <- subset(dependency.out,""!=target.hash)
dependency.out <- subset(dependency.out,!duplicated(file.path(as.character(target.path),as.character(target.file))))
setwd(current.dir)
if(write){
# strip out project path in dependency file
trees <- dependency.out
new.path <- ""
shaved.variables <- c("path","source.file.path","target.path","project.path")
n.shavechars <- nchar(trees$project.path[1])+1
for(char.shave in shaved.variables){
trees[[char.shave]]<- substr(trees[[char.shave]],n.shavechars,nchar(trees[[char.shave]]))
trees[[char.shave]] <- gsub(paste0("^",.Platform$file.sep,"+"),"",trees[[char.shave]])
}
write.dependency(trees,dependency.file)
if(source_info$options$git){
try({	git.add(project.path,file.path(dependency.file))	})
}
}
# Write library versions to specific source directory
print(paste("Completed",source_info$file[["file"]]))
setwd(current.dir)
require(rmarkdown)
current.dir <- getwd()
# Copy and render Rmd file
file.copy(source_info$rmdfile$fullname,file.path(source_info$results.dir,source_info$rmdfile$file),overwrite=TRUE)
if(!checkRmdMode()){
outputfile <- rmarkdown::render(file.path(source_info$results.dir,source_info$rmdfile$file))
outfile <- Create.file.info(source_info$results.dir, basename(outputfile), paste("rendered Rmarkdown of", source_info$file$file))
Write.cap(NULL, outfile, I, source_info)
}else{
outputfile <- gsub("Rmd","html",file.path(source_info$results.dir,source_info$rmdfile$file))
outfile <- Create.file.info(source_info$results.dir, basename(outputfile), paste("rendered Rmarkdown of", source_info$file$file))
if(!file.exists(outfile$fullname)){write(0,outfile$fullname)} # Write a stub for tracking
Write.cap(NULL, outfile, I, source_info)
}
Read.cap(source_info$rmdfile, I, source_info)
Write(sessionInfo(),paste0("Session_info_",source_info$file$db.name,".RObj"),paste0("sessionInfo for", source_info$file[["file"]]),save)
dependency.file <- file.path(source_info$dependency.dir,source_info$dependency.file)
dependency.out <- source_info$dependency$data
dependency.out <- subset(dependency.out,!is.na(dependency))
n.output.files <-	nrow(subset(dependency.out,dependency=="out"))
print(c("# of output files",n.output.files))
project.path <- dependency.out$project.path[1]
dependency.out$project.path[1]
project.path <- dependency.out$project.path[1]
dependency.out$source.git <- NA
if(source_info$options$git){
try({
dependency.out$source.git <- paste(git.info(as.character(dependency.out$path[1]),file.path(dependency.out$source.file.path[1],dependency.out$source.file)[1])[1:5],collapse=" ")
})
}
dependency.out$source.mod.time <- as.character(file.info(file.path(dependency.out$source.file.path[1],dependency.out$source.file[1]))$mtime)
dependency.out$source.hash <-   Digest(file=file.path(dependency.out$source.file.path[1],dependency.out$source.file[1]),serialize=FALSE)
dependency.out$source.hash
for(dep.row.iter in 1:nrow(dependency.out)){
target.file <- file.path(dependency.out$target.path[dep.row.iter],dependency.out$target.file[dep.row.iter])
#		print(target.file)
dependency.out$target.hash[dep.row.iter] <- Digest(file=as.character(target.file),serialize=FALSE)
dependency.out$target.mod.time[dep.row.iter] <- as.character(file.info(as.character(target.file))$mtime)
}
dependency.out <- subset(dependency.out,""!=target.hash)
dependency.out <- subset(dependency.out,!duplicated(file.path(as.character(target.path),as.character(target.file))))
head(dependency.out)
write
write=TRUE
trees <- dependency.out
new.path <- ""
shaved.variables <- c("path","source.file.path","target.path","project.path")
n.shavechars <- nchar(trees$project.path[1])+1
for(char.shave in shaved.variables){
trees[[char.shave]]<- substr(trees[[char.shave]],n.shavechars,nchar(trees[[char.shave]]))
trees[[char.shave]] <- gsub(paste0("^",.Platform$file.sep,"+"),"",trees[[char.shave]])
}
write.dependency(trees,dependency.file)
if(source_info$options$git){
try({	git.add(project.path,file.path(dependency.file))	})
}
head(trees)
source('~/Documents/Projects/adapr/R/finalize_dependency.R')
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "adaprHome"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
Write(data.frame(x=rnorm(102),y=rnorm(102)),"from_read.Rdata")
#project.graph <- get.project.info.si(source_info)$graph
#temp <- plot(project.graph)
#as_data_frame(project)
# End Program Body
dependency.out <- finalize_dependency()
dependency.out
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "adaprHome"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
Write(data.frame(x=rnorm(102),y=rnorm(102)),"from_read.Rdata")
#project.graph <- get.project.info.si(source_info)$graph
#temp <- plot(project.graph)
#as_data_frame(project)
# End Program Body
dependency.out <- finalize_dependency()
head(dependency.out)
source('~/Documents/Projects/adapr/R/finalize_dependency.R')
load_all()
devtools::load_all()
q()
library(devtools)
library(adapr)
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/git_provenance.R')
library(adapr)
git.history.search()
git.history.search
? new
? write.csv
? sessionInfo
? setRefClass
library(adapr)
? loaded_packages
?sesionInfo
? sesion_info
? session_info
source('~/Documents/Projects/adapr/R/intialize.dependency.info.R')
?? biocLite
install.packages("BiocInstaller")
? install.packages
? png
? kable
?? kable
source('~/Documents/Projects/adapr/R/project_report_markdown.R')
? png
? read.table
source('~/Documents/Projects/adapr/R/read_dependency.R')
? write.table
? na.exclude
source('~/Documents/Projects/adapr/R/send_branch_si.R')
? browseURL
? basename
source('~/Documents/Projects/adapr/R/source_sync_si.R')
source('~/Documents/Projects/adapr/R/source_sync_si.R')
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/dependency_class.R')
source('~/Documents/Projects/adapr/R/dependency_class.R')
source('~/Documents/Projects/adapr/R/dependency_class.R')
library(adapr)
? setRefClass
source('~/Documents/Projects/adapr/R/source_sync_si_load.R')
traceback()
library(adapr)
ls()
list.files()
setwd("R")
temp <- list.files()
temp <- lapply(temp,scan,what=character())
temp
temp <- list.files()
filer <- lapply(temp,scan,what=character())
names(filer) <- temp
filer
filer <- lapply(temp,scan,what=character(),sep="\n")
filer
filer <- lapply(temp,scan,what=character(),sep="$@#$@$####$##$@#$#@$@")
filer <- lapply(temp,scan,what=character(),sep="\n")
filer <- lappy(filer,paste,collapse="\n")
filer <- lapply(filer,paste,collapse="\n")
filer
names(filer) <- temp
filer
lapply(filer,function(x){grepl("digest",x)})
lapply(filer,function(x){grepl("library\(digest\)",x)})
lapply(filer,function(x){grepl("library\\(digest\\)",x)})
matches <- lapply(filer,function(x){grepl("library\\(digest\\)",x)})
unlist(matches)
sort(unlist(matches))
library(adapr)
install.packages("pkgKitten")
library(pkgKitten)
library(adapr)
library(adapr)
getwd()
source('~/Documents/Projects/adapr/R/Check_file_hash.R')
source('~/Documents/Projects/adapr/R/create_program_graph.R')
source('~/Documents/Projects/adapr/R/create_program_graph.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/Render.R')
source('~/Documents/Projects/adapr/R/hashtags.R')
load_all()
library(adapr)
library(adapr)
? document
library(adapr)
library(adapr)
library(adapr)
library(adapr)
shiny::runApp('~/Documents/Projects/adapr/inst/adapr21')
adapr_options$git
runApp('~/Documents/Projects/adapr/inst/adapr21')
load_all()
library(adapr)
library(adapr)
install.packages("roxygen2")
install.packages(c("gdata","plotly"))
install.packages(c(‘ggplot2’, ‘shiny’, ‘shinydashboard’, ‘knitr’, ‘rmarkdown’, ‘igraph’, ‘devtools’, ‘plyr’, ‘dplyr’))
install.packages(c('ggplot2', 'shiny', 'shinydashboard', 'knitr', 'rmarkdown', 'igraph', 'devtools', 'plyr', 'dplyr'))
library(igraph)
library(devtools)
install_github("bwlewis/irlba")
install.packages("irlba")
install.packages("plotly")
install_github("plotly")
q()
