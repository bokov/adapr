library(adapr)
source('~/Documents/Projects/adapr/R/default_setup.R')
library(devtools)
load_all()
library(adapr)
dir.create(dirname(options.site),recursive=TRUE)
options.site <- file.path(path.expand.2("~"),"ProjectPaths", option.file)
option.file <- "adapr_options.csv"
options.site <- file.path(path.expand.2("~"),"ProjectPaths", option.file)
dir.create(dirname(options.site),recursive=TRUE)
load_all()
library(adapr)
temp <- numeric(0)
temp
paste(temp,"hi")
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
load_all()
library(adapr)
try(stop())
source('~/Documents/Projects/adapr/R/default_setup.R')
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/default_setup.R')
source('~/Documents/Projects/adapr/R/default_setup.R')
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/default_setup.R')
load_all()
library(adapr)
? dir.exists
version()
citation()
version
version$arch
version$major +version$minor
as.numeric(version$major) +as.numeric(version$minor)
as.numeric(version$major) +as.numeric(version$minor)/10
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
set_adapr_options("git"=="FALSE")
set_adapr_options("git","FALSE")
set_adapr_options("git","TRUE")
load_all()
library(adapr)
get_adapr_options
path.expand.2("~")
source('~/Documents/Projects/adapr/R/default_setup.R')
load_all()
library(adapr)
get_adapr_options()
source('~/Documents/Projects/adapr/R/create_markdown.R')
q()
library(adapr)
load_all()
library(devtools)
load_all()
library(adapr)
library(adapr)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"examine_data.R"
project.id <- "OAH_Replicating"
source_info <- create_source_file_dir(source.description="reads data")
rm(list=ls())
load_all()
load_all()
library(devtools)
library(devtools)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"examine_data.R"
project.id <- "OAH_Replicating"
source_info <- create_source_file_dir(source.description="reads data")
write(as.data.frame(session_info()$packages),file.path(source_info$source.support.dir,"package_info.csv"))
as.data.frame(session_info()$packages)
temp <- as.data.frame(session_info()$packages)
class(temp)
file.path(source_info_arg$source.support.dir,"package_info.csv")
write.csv(as.data.frame(session_info()$packages),file.path(source_info$source.support.dir,"package_info.csv"))
q()
library(devtools)
load_all()
library(adapr)
source('~/Documents/Projects/OAH_Replicating/Programs/examine_data.R')
dependency.out <- finalize_dependency()
library(adapr)
adapr21()
library(devtools)
load_all()
library(adapr)
load.source.directory
library(adapr)
load_all()
library(adapr)
create_program_graph("Gerken_234")
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("Gerken_234")
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("Gerken_234")
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("Gerken_234")
create_program_graph("test_adapr")
create_program_graph("adaprHome")
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("adaprHome")
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("adaprHome")
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("adaprHome")
shiny::runApp('inst/adapr21')
load_all()
library(adapr)
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
load_all()
library(adapr)
q()
library(adapr)
adapr21()
library(devtools)
load_all()
adapr21()
q()
library(devtools)
load_all()
library(adapr)
adapr21()
install.packages("car")
install.packages("pbkrtest")
install.packages("~/Downloads/pbkrtest_0.4-6.tar.gz", repos = NULL, type = "source")
install.packages("~/Downloads/pbkrtest_0.4-6.tar.gz", repos = NULL, type = "source")
redirect.tree
library(devtools)
ls()
load_all()
load_all()
ls()
redirect.tree
redirect.tree
load_all()
library(adapr)
shiny::runApp('inst/adapr21')
source('~/Documents/Projects/adapr/R/plant_tree.R')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
ifelse(nrow(get_orchard())==0,"Configure Project Directories.","Waiting to create project.")
shiny::runApp('inst/adapr21')
library(adapr)
default.adapr.setup()
library(adapr)
library(devtools)
load_all()
library(adapr)
library(adapr)
shiny::runApp('~/Documents/Projects/TestSelect')
library(shinyFiles)
install.packages("shinyFIles")
library(shinyFiles)
install.packages("shinyFiles")
library(shinyFiles)
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
getwd()
shiny::runApp('~/Documents/Projects/TestSelect')
? shinyFileChoose
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
? renderText
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
? textOutput
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
? shinyDirButton
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
wd()
getwd()
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shiny::runApp('~/Documents/Projects/TestSelect')
shinyFilesExample()
shiny::runApp('~/Documents/Projects/TestSelect')
shinyFilesExample()
ls()
source('~/Documents/Projects/adapr/R/script_loader.R')
scriptLoader("Finasteride_adapr","read_data.R")
```{r,echo=FALSE}
#scriptLoader("Finasteride_adapr","read_data.R")
source('~/Documents/Projects/adapr/R/finalize_dependency.R')
source('~/Documents/Projects/adapr/R/finalize_dependency.R')
write(0,"~/Documents/Projects/Temp/test.html")
source_info
library(adapr)
write()
Write.cap()
Write.cap
is.null(options()$Rmdstart
)
source('~/Documents/Projects/adapr/R/create_markdown.R')
library(devtools)
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/create_markdown.R')
source('~/Documents/Projects/adapr/R/create_markdown.R')
source('~/Documents/Projects/adapr/R/create_markdown.R')
library(devtools)
load_all()
library(adapr)
load_all()
source('~/Documents/Projects/adapr/R/create_markdown.R')
library(adapr)
load_all()
source('~/Documents/Projects/adapr/R/create_markdown.R')
library(adapr)
source('~/Documents/Projects/adapr/R/create_markdown.R')
library(devtools)
load_all()
library(adapr)
library(adapr)
title: "PCA_Spore test.Rmd: test adpar"
author: "JonathanGelfond"
output: html_document
---
```{r,echo=FALSE}
require(adapr)
paste("Created on",(Sys.time() ))
```
```{r}
scriptLoader( "si$project.id", , "si$file$file"  )
```
```{r}
#finalize_dependency()
```
require(adapr)
paste("Created on",(Sys.time() ))
scriptLoader( "si$project.id", , "si$file$file"  )
source('~/Documents/Projects/adapr/R/create_markdown.R')
source('~/Documents/Projects/adapr/R/create_markdown.R')
source('~/Documents/Projects/adapr/R/create_markdown.R')
source('~/Documents/Projects/adapr/R/create_markdown.R')
source('~/Documents/Projects/adapr/R/finalize_dependency.R')
load_all()
library(adapr)
load_all()
library(adapr)
load_all()
library(adapr)
```{r,echo=FALSE}
require(adapr)
paste("Created on",(Sys.time() ))
```
```{r}
scriptLoader( "PCA_Spore" , "test.R" )
```
```{r}
finalize_dependency()
```
```{r,echo=FALSE}
require(adapr)
paste("Created on",(Sys.time() ))
```
```{r}
scriptLoader( "PCA_Spore" , "test.R" )
```
```{r}
finalize_dependency()
```
```{r}
temp <- scriptLoader( "PCA_Spore" , "test.R" )
```
```{r,echo=FALSE}
require(adapr)
paste("Created on",(Sys.time() ))
```
```{r,echo=FALSE}
require(adapr)
paste("Created on",(Sys.time() ))
```
```{r}
temp <- scriptLoader( "PCA_Spore" , "test.R" )
```
```{r}
temp <- finalize_dependency()
```
```{r}
print(10)
```
```{r}
print(10)
```
print(10)
temp <- finalize_dependency()
temp <- scriptLoader( "PCA_Spore" , "test.R" )
temp <- scriptLoader( "PCA_Spore" , "test.R" )
```{r,echo=FALSE,warng=FALSE,message=FALSE}
temp
temp <- finalize_dependency()
temp
```
```
```{r}
q()
libary(devtools)
library(devtools)
load_all()
library(adapr)
load_all()
library(adapr)
finalize_dependency()
require(adapr)
paste("Created on",(Sys.time() ))
```
```{r}
scriptLoader( "PCA_Spore" , "test.R" )
```
```{r}
finalize_dependency()
```
knit_with_parameters('~/Documents/Projects/PCA_Spore/Programs/Markdown/test.Rmd')
rm(list=ls())
load_all()
library(devtools)
load_all()
options()
getwd()
# Chunk 1
require(adapr)
paste("Created on",(Sys.time() ))
```
```{r}
scriptLoader( "PCA_Spore" , "test.R" )
```
```{r}
if(!is.null(options()$Rmdstart)){finalize_dependency() }
getwd()
scriptLoader( "PCA_Spore" , "test.R" )
getwd()
# Chunk 1
require(adapr)
paste("Created on",(Sys.time() ))
```
```{r}
scriptLoader( "PCA_Spore" , "test.R" )
```
```{r}
if(!is.null(options()$Rmdstart)){finalize_dependency() }
scriptLoader( "PCA_Spore" , "test.R" )
getwd()
---
title: "PCA_Spore test.Rmd: Description of your program..."
author: "JonathanGelfond"
output: html_document
---
```{r,echo=FALSE,message=FALSE}
require(adapr)
paste("Created on",(Sys.time() ))
```
```{r}
scriptLoader( "PCA_Spore" , "test.R" )
```
```{r,echo=FALSE}
if(!is.null(options()$Rmdstart)){finalize_dependency() }
```
getwd()
if(!is.null(options()$Rmdstart)){temp <- finalize_dependency() }
# Chunk 1
require(adapr)
paste("Created on",(Sys.time() ))
```
```{r}
scriptLoader( "PCA_Spore" , "test.R" )
```
```{r,echo=FALSE}
if(!is.null(options()$Rmdstart)){temp <- finalize_dependency() }
knit_with_parameters('~/Documents/Projects/PCA_Spore/Programs/Markdown/test.Rmd')
q()
library(adapr)
load_all()
library(devtools)
load_all()
ls()
topdirs
ls()
source('~/Documents/Projects/adapr/R/Read.R')
listDatafiles <- function(si=source_info){
# lightweight read.cap take small number of args
# used file.name and description create file.information
# reads from data directory
file_data<- si$all.files
file_sub <- subset(file_data,target.path==si$data.dir,select = c("file","path","description"))
file_sub$path <- gsub(".*/","",file_sub$path)
return(read.obj)
}
file_data<- si$all.files
file_sub <- subset(file_data,path==si$data.dir,select = c("file","path","description"))
file_sub$path <- gsub(".*/","",file_sub$path)
allfiles <- data.frame(file=list.files(si$data.dir,include.dirs=TRUE))
allfiles <- data.frame(file=list.files(si$data.dir,recursive=TRUE))
file_data<- si$all.files
file_sub <- subset(file_data,path==si$data.dir,select = c("file","path","description"))
file_sub$path <- gsub(".*/","",file_sub$path)
allfiles <- data.frame(file=list.files(si$data.dir,recursive=TRUE,full.names =1),stringsAsFactors = FALSE)
file_data<- si$all.files
file_sub <- subset(file_data,path==si$data.dir,select = c("file","path","description"))
file_sub$path <- gsub(".*/","",file_sub$path)
allfiles <- data.frame(file=list.files(si$data.dir,recursive=TRUE),stringsAsFactors = FALSE)
allfiles$file <- basename(allfiles$file)
allfiles <- merge(allfiles,file_sub,by="file",all.x=TRUE)
file_data <- si$all.files
file_sub <- subset(file_data,path==si$data.dir,select = c("file","path","description"))
file_sub$path <- gsub(".*/","",file_sub$path)
allfiles <- data.frame(file=list.files(si$data.dir,recursive=TRUE),stringsAsFactors = FALSE)
allfiles$file <- basename(allfiles$file)
allfiles <- merge(allfiles,file_sub,by="file",all.x=TRUE)
allfiles$path <- substring(as.character(allfiles$file),nchar(si$project.path)+2,nchar(as.character(allfiles$file)))
allfiles$path
allfiles$path <- dirname(substring(as.character(allfiles$file),nchar(si$project.path)+2,nchar(as.character(allfiles$file))))
load_all()
library(adapr)
laod_all()
library(devtools)
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/list_files.R')
source('~/Documents/Projects/adapr/R/list_files.R')
library(devtools)
load_all()
library(adapr)
install.packages("shinyIncubator")
devtools::install_github("shinyIncubator")
devtools::install_github("RStudio/shinyIncubator")
devtools::install_github("RStudio/shiny-incubator")
devtools::install_github('ramnathv/rCharts')
library(adapr)
load_all()
library(adapr)
library(adapr)
library(adapr)
load_all()
library(adapr)
library(adapr)
load_all()
library(adapr)
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/script_loader.R')
checkRmdMode()
options(Rmdstart=TRUE)
checkRmdMode()
options(Rmdstart=FALSE)
checkRmdMode()
checkRmdMode(TRUE)
source('~/Documents/Projects/adapr/R/script_loader.R')
checkRmdMode(TRUE)
load_all()
library(adapr)
---
title: "test1 test_loader.Rmd: test script loader"
author: "JonathanGelfond"
output: html_document
---
```{r,echo=FALSE,message=FALSE,warning=FALSE,include=FALSE}
require(adapr)
paste0("Created on ",(Sys.time() ))
```
```{r}
scriptLoader("test1","test_loader.R")
```
```{r}
if(checkRmdMode()){dependency.out <- finalize_dependency() }
```
checkRmdMode()
checkRmdMode()
library(adapr)
checkRmdMode()
load_all()
library(devtools)
library(devtools)
load_all()
library(adapr)
library(adapr)
