testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
testdir <- "/Users/Gelfond/Documents/Projects/Need2Know/Subprojects/N2K2/Data"
tempfile <- file.path(testdir,"DELETEME.NOW")
cputime <- Sys.time()
write(cputime,tempfile)
filetime <- file.info(tempfile)$ctime
file.remove(tempfile)
delay <- cputime - filetime
print(delay)
Sync.test
Sync.test.pi
Sync.test.si
pull_source_info
get.project.info.si
Condense.file.info
Harvest.trees
create_program_graph("test_adapr")
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"graph_sims.R"
project.id <- "Li_226"
source_info <- create_source_file_dir(source.description="plot simulations")
# Program body here
simresults <- Load.branch("allresults.Rdata")
head(simresults)
source('~/Documents/Projects/Li_226/Programs/graph_sims.R')
source('~/Documents/Projects/Li_226/Programs/graph_sims.R')
source('~/Documents/Projects/Li_226/Programs/graph_sims.R')
source('~/Documents/Projects/Li_226/Programs/graph_sims.R')
source('~/Documents/Projects/Li_226/Programs/graph_sims.R')
rbinom(100,0.5,1)
rbinom(100,1,0.5)
temp <- rbinom(100,1,0.5)
chisq.test(table(temp))
temp <- rbinom(100,1,0.6)
chisq.test(table(temp))
table(temp)
mcnemar.test(matrix(c(0,41,59,0),2,2))
?chisq.test
library(devtools)
load_all()
library(adapr)
source('~/Documents/Projects/adapr/R/sync_test_2.R')
source('~/Documents/Projects/adapr/R/Check_file_hash_source.R')
trees <- Harvest.trees(pull_source_info("test_adapr")$dependency.dir)
library(plyr)
trees <- Harvest.trees(pull_source_info("test_adapr")$dependency.dir)
trees
head(trees)
target.mtime.check <- ddply(trees,c("source.file","source.file.path","target.path","target.file"),function(x){
currrent.mtime <- ""
try({
current.mtime <- file.info(file=file.path(x$target.path[1],x$target.file[1]))$mtime
})
x$hash.fail <- current.hash != x$target.mod.time
return(x)
})
target.mtime.check <- ddply(trees,c("source.file","source.file.path","target.path","target.file"),function(x){
currrent.mtime <- ""
try({
current.mtime <- file.info(file=file.path(x$target.path[1],x$target.file[1]))$mtime
})
x$hash.fail <- current.mtime  != x$target.mod.time
return(x)
})
target.mtime.check
target.mtime.check <- ddply(trees,c("source.file","source.file.path","target.path","target.file"),function(x){
currrent.mtime <- ""
try({
current.mtime <- file.info(file=file.path(x$target.path[1],x$target.file[1]))$mtime
})
x$mtime.fail <- current.mtime  != x$target.mod.time
return(x)
})
failed.targets <- subset(target.hash.check,mtime.fail)
failed.targets <- subset(target.mtime.check,mtime.fail)
sources.of.failed.targets <- subset(failed.targets,select=c("source.file","source.file.path"))
sources.of.failed.targets$file <- sources.of.failed.targets$source.file
sources.of.failed.targets$path <- sources.of.failed.targets$source.file.path
sources.of.failed.targets
all.sources.torun <- subset(sources.of.failed.targets,select=c("file","path"))
all.sources.torun <- unique(all.sources.torun)
failed.targets$file <- failed.targets$target.file
failed.targets$path <- failed.targets$target.path
target.mtime.check <- ddply(trees,c("source.file","source.file.path","target.path","target.file"),function(x){
currrent.mtime <- ""
try({
current.mtime <- file.info(file=file.path(x$target.path[1],x$target.file[1]))$mtime
})
x$mtime.fail <- current.mtime  != x$target.mod.time
return(x)
})
failed.targets <- subset(target.mtime.check,mtime.fail)
sources.of.failed.targets <- subset(failed.targets,select=c("source.file","source.file.path"))
sources.of.failed.targets$file <- sources.of.failed.targets$source.file
sources.of.failed.targets$path <- sources.of.failed.targets$source.file.path
all.sources.torun <- subset(sources.of.failed.targets,select=c("file","path"))
all.sources.torun <- unique(all.sources.torun)
failed.targets$file <- failed.targets$target.file
failed.targets$path <- failed.targets$target.path
all.failures <-   subset(sources.of.failed.targets,select=c("file","path"))
all.failures
head(trees)
source.df <- subset(trees,!duplicated(source.hash))
source.df <- subset(trees,!duplicated(source.hash))
source.mtime.check <- ddply(source.df,c("source.file","source.file.path"),function(x){
current.mtime <- ""
try({
current.mtime <- file.info(file=file.path(x$source.file.path[1],x$source.file[1])$mtime
})
mtime.fail <- current.mtime  != x$source.mod.time
return(data.frame( mtime.fail))
})
failed.sources <- subset(source.mtime.check,mtime.fail)
source.df <- subset(trees,!duplicated(source.hash))
source.mtime.check <- ddply(source.df,c("source.file","source.file.path"),function(x){
current.mtime <- ""
try({
current.mtime <- file.info(file=file.path(x$source.file.path[1],x$source.file[1]))$mtime
})
mtime.fail <- current.mtime  != x$source.mod.time
return(data.frame( mtime.fail))
})
failed.sources <- subset(source.mtime.check,mtime.fail)
failed.sources$file <- failed.sources$source.file
failed.sources$path <- failed.sources$source.file.path
failed.sources
source.df <- subset(trees,!duplicated(source.hash))
source.mtime.check <- ddply(source.df,c("source.file","source.file.path"),function(x){
current.mtime <- ""
try({
current.mtime <- file.info(file=file.path(x$source.file.path[1],x$source.file[1]))$mtime
})
mtime.fail <- current.mtime  != x$source.mod.time
return(data.frame( mtime.fail))
})
failed.sources <- subset(source.mtime.check,mtime.fail)
failed.sources$file <- failed.sources$source.file
failed.sources$path <- failed.sources$source.file.path
failed.sources
source('~/Documents/Projects/adapr/R/Check_file_mtime_source.R')
source('~/Documents/Projects/adapr/R/sync_test_3.R')
source('~/Documents/Projects/adapr/R/Check_file_mtime_source.R')
load_all()
library(adapr)
shinyTree()
Sync.test
shinyTree
load_all()
library(adapr)
adapr21()
install.packages("shinydashboard")
library(shinydashboard)
adapr21()
library(shinydashboard)
adapr21()
loaded_packages()
sessionInfo()
load_all()
library(adapr)
adapr21()
get_orchard
get_adapr_options
options <- get_adapr_options(FALSE)
options
ldply(options,function(x){
name(x)
})
ldply(options,function(x){
names(x)
})
ldply(options,function(x){
print( names(x))
})
dfout <- NULL
for(i in 1:length(options)){
dfout <- rbind(dfout,data.frame(option=names(options[i]),value=options[[i]]))
}
dfout
source('~/Documents/Projects/adapr/R/get.adapr.options.R')
get_adapr_options()
set_adapr_options()
get_adapr_options()
temp <- get_adapr_options()
temp[["default.project.dir"]]
length(temp[["default.project.dir"]])
set_adapr_options("notanaoption","o")
get_adapr_options
get_adapr_options()
set_adapr_options("notanaoption","o")
get_adapr_options()
load_all()
library(adapr)
adapr21()
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
tableOutpu
tableOutput
?tableOutput
cars
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
trees <- Harvest.trees(pull_source_info("test_adapr")$dependency.dir)
head(trees)
shiny::runApp('inst/adapr21')
trees
head(trees)
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
exists(rnorm)
exists("rnorm")
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
head(trees)
shiny::runApp('inst/adapr21')
trees
make.hyperlink
shiny::runApp('inst/adapr21')
make.hyperlink
shiny::runApp('inst/adapr21')
iotable
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
render_html
htmlOutput
htmlOutput/
?htmlOutput
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
createLink <- function(val) {
sprintf('<a href="https://www.google.com/#q=%s" target="_blank" class="btn btn-primary">Info</a>',val)
}
createLink("temp")
iotable
source('~/.active-rstudio-document')
library(shiny)
createLink <- function(val) {
sprintf('<a href="https://www.google.com/#q=%s" target="_blank" class="btn btn-primary">Info</a>',val)
}
ui <- fluidPage(
titlePanel("Table with Links!"),
sidebarLayout(
sidebarPanel(
h4("Click the link in the table to see
a google search for the car.")
),
mainPanel(
dataTableOutput('table1')
)
)
)
server <- function(input, output) {
output$table1 <- renderDataTable({
my_table <- cbind(rownames(mtcars), mtcars)
colnames(my_table)[1] <- 'car'
my_table$link <- createLink(my_table$car)
return(my_table)
}, escape = FALSE)
}
shinyApp(ui, server)
library(shiny)
createLink <- function(val) {
sprintf('<a href="https://www.google.com/#q=%s" target="_blank" class="btn btn-primary">Info</a>',val)
}
ui <- fluidPage(
titlePanel("Table with Links!"),
sidebarLayout(
sidebarPanel(
h4("Click the link in the table to see
a google search for the car.")
),
mainPanel(
dataTableOutput('table1')
)
)
)
server <- function(input, output) {
output$table1 <- renderDataTable({
my_table <- cbind(rownames(mtcars), mtcars)
colnames(my_table)[1] <- 'car'
my_table$link <- createLink(my_table$car)
return(my_table)
}, escape = FALSE)
}
shinyApp(ui, server)
shiny::runApp('inst/adapr21')
load_all()
library(adapr)
q()
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
? renderDataTable
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
iotable <- subset(report_tree,source.file==basename(out.$fullname))
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
?geom_text
shiny::runApp('inst/adapr21')
? geom_annotate
shiny::runApp('inst/adapr21')
shiny::runApp('inst/adapr21')
? brushedPoints
shiny::runApp('inst/adapr21')
fp <- "/Users/Gelfond/Documents/Projects/adaprHome/Programs/common_libs.csv"
file.exists(fp)
fp <- "/Users/Gelfond/Documents/Projects/adaprHome/Programs/common_libs.csv"
fp <- "/Users/Gelfond/Documents/Projects/adaprHome/Programs/test_3.R"
file.exists(fp)
fp <- "/Users/Gelfond/Documents/Projects/adaprHome/Programs/test3.R"
file.exists(fp)
browseURL(fp)
shiny::runApp('inst/adapr21')
