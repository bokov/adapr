tos <- c(vertexTo,tos)
}# if one step path
}# loop over targets
if(length(tos)>0){
shortgraph <- rbind(shortgraph,data.frame(from=vertex,to=tos))
}# if any targets connected
longgraph <- rbind(longgraph,shortgraph)
}
isg <- simplify(graph.data.frame(longgraph))
#plot(isg)
#plot(isg,layout=tp(layout.sugiyama(isg)$layout))
isgdf <- igraph::as_data_frame(isg)
dfo <- tp(layout.sugiyama(isg)$layout)
colnames(dfo) <- c("x","y")
dfo <- data.frame(dfo,v=V(isg)$name)
todfo <- dfo
names(todfo)[1:2] <- c("x2","y2")
tos <- merge(isgdf,todfo,by.x="to",by.y="v")
froms <- merge(tos,dfo,by.x="from",by.y="v")
ranger <- range(c(froms$x,froms$x2))
span <- 0.1*abs(diff(ranger))
horizontal.range <- c(ranger[1]-span,ranger[2]+span)
rangery <- range(c(froms$y,froms$y2))
graph.height <- length(unique(c(froms$y,froms$y2)))
graph.width <- length(unique(c(froms$y,froms$y2)))
dotsize0 <- if(graph.height>5){dot.size <-1+10/graph.height}else{dot.size0 <- 10}
text.nudge0 <- 0.05*abs(diff(rangery))
if(graph.height>5){text.nudge0 <-text.nudge0/graph.height}
text.size0 <- 5
if(graph.width>5){text.size0 <-2 + 2*text.size0/graph.width}
dfo$synccolor <- ifelse(dfo$v %in% unsync.vertex,"red","skyblue")
proj.gg <- ggplot(dfo,aes(x=x,y=y,label=basename(as.character(v))))+geom_text(nudge_y=text.nudge0,size=text.size0,color="red")+geom_point(aes(color=synccolor),size=dotsize0,alpha=0.5)+annotate(geom="segment",x=froms$x,y=froms$y,xend=froms$x2,yend=froms$y2,arrow=arrow(length=unit(0.2,"cm"),type="closed"),alpha=0.5/ifelse(graph.width>5,5,1))+scale_x_continuous(limits=horizontal.range)+theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+ggtitle(paste(project.id,"R Script Graph"))
proj.gg
dfo$synccolor
proj.gg <- ggplot(dfo,aes(x=x,y=y,label=basename(as.character(v))))+geom_text(nudge_y=text.nudge0,size=text.size0,color="red")+geom_point(aes(color=synccolor),size=dotsize0,alpha=0.5)+annotate(geom="segment",x=froms$x,y=froms$y,xend=froms$x2,yend=froms$y2,arrow=arrow(length=unit(0.2,"cm"),type="closed"),alpha=0.5/ifelse(graph.width>5,5,1))+scale_x_continuous(limits=horizontal.range)+theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+ggtitle(paste(project.id,"R Script Graph"))
proj.gg
dfo$synccolor
proj.gg <- ggplot(dfo,aes(x=x,y=y,label=basename(as.character(v))))+geom_text(nudge_y=text.nudge0,size=text.size0,color="red")+geom_point(aes(color=synccolor),size=dotsize0,alpha=0.5)
proj.gg
dfo$synccolor <- as.character(ifelse(dfo$v %in% unsync.vertex,"red","skyblue"))
proj.gg <- ggplot(dfo,aes(x=x,y=y,label=basename(as.character(v))))+geom_text(nudge_y=text.nudge0,size=text.size0,color="red")+geom_point(aes(color=synccolor),size=dotsize0,alpha=0.5)+
annotate(geom="segment",x=froms$x,y=froms$y,xend=froms$x2,yend=froms$y2,arrow=arrow(length=unit(0.2,"cm"),type="closed"),alpha=0.5/ifelse(graph.width>5,5,1))+
scale_x_continuous(limits=horizontal.range)+theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+ggtitle(paste(project.id,"R Script Graph"))
proj.gg
dfo$synccolor <- as.character(ifelse(dfo$v %in% unsync.vertex,"red","blue"))
proj.gg <- ggplot(dfo,aes(x=x,y=y,label=basename(as.character(v))))+geom_text(nudge_y=text.nudge0,size=text.size0,color="red")+geom_point(aes(color=synccolor),size=dotsize0,alpha=0.5)+
annotate(geom="segment",x=froms$x,y=froms$y,xend=froms$x2,yend=froms$y2,arrow=arrow(length=unit(0.2,"cm"),type="closed"),alpha=0.5/ifelse(graph.width>5,5,1))+
scale_x_continuous(limits=horizontal.range)+theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+ggtitle(paste(project.id,"R Script Graph"))
dfo$synccolor <- as.character(ifelse(dfo$v %in% unsync.vertex,"red","blue"))
proj.gg <- ggplot(dfo,aes(x=x,y=y,label=basename(as.character(v))))+geom_text(nudge_y=text.nudge0,size=text.size0,color="red")+geom_point(aes(color=synccolor),size=dotsize0,alpha=0.5)+
annotate(geom="segment",x=froms$x,y=froms$y,xend=froms$x2,yend=froms$y2,arrow=arrow(length=unit(0.2,"cm"),type="closed"),alpha=0.5/ifelse(graph.width>5,5,1))+
scale_x_continuous(limits=horizontal.range)+theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+ggtitle(paste(project.id,"R Script Graph"))
proj.gg <- ggplot(dfo,aes(x=x,y=y,label=basename(as.character(v))))+geom_text(nudge_y=text.nudge0,size=text.size0,color="red")+geom_point(aes(color=synccolor),size=dotsize0,alpha=0.5)
proj.gg <- ggplot(dfo,aes(x=x,y=y,label=basename(as.character(v))))+geom_text(nudge_y=text.nudge0,size=text.size0,color="red")+geom_point(aes(color=synccolor),size=dotsize0,alpha=0.5)
dfo$synccolor
proj.gg
proj.gg <- ggplot(dfo,aes(x=x,y=y,label=basename(as.character(v))))+geom_text(nudge_y=text.nudge0,size=text.size0,color="red")+geom_point(aes(fill=synccolor),size=dotsize0,alpha=0.5)
proj.gg
proj.gg <- ggplot(dfo,aes(x=x,y=y,label=basename(as.character(v))))+geom_text(nudge_y=text.nudge0,size=text.size0,color="red")+geom_point(color=dfo$synccolor,size=dotsize0,alpha=0.5)+
annotate(geom="segment",x=froms$x,y=froms$y,xend=froms$x2,yend=froms$y2,arrow=arrow(length=unit(0.2,"cm"),type="closed"),alpha=0.5/ifelse(graph.width>5,5,1))+
scale_x_continuous(limits=horizontal.range)+theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="none",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+ggtitle(paste(project.id,"R Script Graph"))
proj.gg
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("test_adapr")
create_program_graph("adaprHome")
create_program_graph("adaprHome")
project.id <- "adaprHome"
si <- pull_source_info(project.id)
projinfo <- get.project.info.si(si)
unsync.vertex <- c("",sync.test.si(pull_source_info(project.id))$sources.to.sync$fullname.abbr)
projgraph <- projinfo$graph
unsync.vertex
sync.test.si(pull_source_info(project.id))$sources.to.sync$fullname.abbr
source('~/Documents/Projects/adapr/R/create_program_graph.R')
create_program_graph("adaprHome")
create_program_graph("adaprHome")
create_program_graph("adaprHome")
project.id
si <- pull_source_info(project.id)
projinfo <- get.project.info.si(si)
unsync.vertex <- c("",as.character(sync.test.si(pull_source_info(project.id))$sources.to.sync$fullname.abbr))
unsync.vertex
unsync.vertex <- c("",as.character(sync.test.si(pull_source_info(project.id))$sources.to.sync$fullname.abbr))
sync.test.si(pull_source_info(project.id))
unsync.vertex <- c("",as.character(sync.test.si(si))$sources.to.sync$fullname.abbr))
unsync.vertex <- c("",as.character(sync.test.si(si)$sources.to.sync$fullname.abbr))
unsync.vertex
shinyTree()
load_all()
load_all()
library(adapr)
shinyTree()
load_all()
library(adapr)
shinyTree()
dagger <- get.project.info.si(pull_source_info("adaprHome"))
# track the run time of source files
# track the modification time of target files
V(dagger)$time <- ifelse(V(dagger)$file.class=="source",V(dagger)$run.time,V(dagger)$mod.time)
children.list <- get.adjlist(dagger,mode="out")
updated.logical <- matrix(FALSE,length(children.list),1,dimnames=list(V(dagger)$name,"time"))
# find the out dated nodes
parent <- names(children.list)[1]
for(parent in names(children.list)){
if(length(children.list[[parent]])>0){
parent.time <- V(dagger)$time[V(dagger)$name==parent]
min.child.time <- min(V(dagger)$time[children.list[[parent]]])
updated.logical[parent,] <- parent.time > min.child.time
if(parent.time > min.child.time){
print(paste("Parent younger than child:","Parent =",parent,parent.time))
child.times <- subset(data.frame(child=V(dagger)$name[children.list[[parent]]], time=V(dagger)$time[children.list[[parent]]]),time<parent.time)
print("Child times")
print(child.times)
}
}
}
tree <- Harvest.trees("/Users/Gelfond/Documents/Projects/adaprHome/Programs/Dependency")
# track the run time of source files
# track the modification time of target files
V(dagger)$time <- ifelse(V(dagger)$file.class=="source",V(dagger)$run.time,V(dagger)$mod.time)
children.list <- get.adjlist(dagger,mode="out")
updated.logical <- matrix(FALSE,length(children.list),1,dimnames=list(V(dagger)$name,"time"))
# find the out dated nodes
parent <- names(children.list)[1]
for(parent in names(children.list)){
if(length(children.list[[parent]])>0){
parent.time <- V(dagger)$time[V(dagger)$name==parent]
min.child.time <- min(V(dagger)$time[children.list[[parent]]])
updated.logical[parent,] <- parent.time > min.child.time
if(parent.time > min.child.time){
print(paste("Parent younger than child:","Parent =",parent,parent.time))
child.times <- subset(data.frame(child=V(dagger)$name[children.list[[parent]]], time=V(dagger)$time[children.list[[parent]]]),time<parent.time)
print("Child times")
print(child.times)
}
}
}
dagger <- get.project.info.si(pull_source_info("adaprHome"))
dagger
dagger <- get.project.info.si(pull_source_info("adaprHome"))
dagger <- dagger$graph
if(!is.dag(dagger)){stop("The computing dependencies have cycles.")}
# track the run time of source files
# track the modification time of target files
V(dagger)$time <- ifelse(V(dagger)$file.class=="source",V(dagger)$run.time,V(dagger)$mod.time)
children.list <- get.adjlist(dagger,mode="out")
updated.logical <- matrix(FALSE,length(children.list),1,dimnames=list(V(dagger)$name,"time"))
# find the out dated nodes
parent <- names(children.list)[1]
for(parent in names(children.list)){
if(length(children.list[[parent]])>0){
parent.time <- V(dagger)$time[V(dagger)$name==parent]
min.child.time <- min(V(dagger)$time[children.list[[parent]]])
updated.logical[parent,] <- parent.time > min.child.time
if(parent.time > min.child.time){
print(paste("Parent younger than child:","Parent =",parent,parent.time))
child.times <- subset(data.frame(child=V(dagger)$name[children.list[[parent]]], time=V(dagger)$time[children.list[[parent]]]),time<parent.time)
print("Child times")
print(child.times)
}
}
}
vertex.updates <- rownames(updated.logical)[updated.logical]
V(dagger)$color <- "blue"
#	par(mfrow=c(1,2))
#	plot(dagger,main="Dagger with time as color")
dagger.updated <- dagger
V(dagger.updated)$color <- ifelse(V(dagger.updated)$name %in% vertex.updates,"red","white")
if(plotl){plot(dagger.updated,main="Dagger with out of sync detection")}
# check for file hash inconsistencies
file.check <- Check.file.hash.source(dependency.object=tree)
file.info <- Condense.file.info(tree)
# get the abbreviated names from the tree to match to the vertex
if(file.check$hash.fail){
all.fail <- rbind.fill(file.check$stale.hash,file.check$multiple.hash)
failed.tree <- merge(all.fail,file.info,by=c("file","path"))
print("Hash fails")
print(failed.tree)
failed.fullname.abbr <- failed.tree$fullname.abbr
vertex.updates <- unique(c(vertex.updates,failed.fullname.abbr))
}
file.check
dependency.dir <- "/Users/Gelfond/Documents/Projects/adaprHome/Programs/Dependency"
if(is.null(dependency.object)){
trees <- Harvest.trees(dependency.dir)
trees <- subset(trees,!is.na(dependency))
}else{trees <- dependency.object}
source.df <- subset(trees,!duplicated(source.hash))
#Check source hashes are current
source.hash.check <- ddply(source.df,c("source.file","source.file.path"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$source.file.path[1],x$source.file[1]),serialize=FALSE)
})
hash.fail <- current.hash != x$source.hash
return(data.frame(hash.fail))
})
trees <- Harvest.trees(dependency.dir)
trees <- subset(trees,!is.na(dependency))
trees
source.df <- subset(trees,!duplicated(source.hash))
#Check source hashes are current
source.hash.check <- ddply(source.df,c("source.file","source.file.path"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$source.file.path[1],x$source.file[1]),serialize=FALSE)
})
hash.fail <- current.hash != x$source.hash
return(data.frame(hash.fail))
})
failed.sources <- subset(source.hash.check,hash.fail)
failed.sources$file <- failed.sources$source.file
failed.sources$path <- failed.sources$source.file.path
failed.sources
(source.df)
source.df <- subset(trees,!duplicated(source.hash))
source.df
source.hash.check <- ddply(source.df,c("source.file","source.file.path"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$source.file.path[1],x$source.file[1]),serialize=FALSE)
})
hash.fail <- current.hash != x$source.hash
return(data.frame(hash.fail))
})
hash.fail
source.hash.check
source.hash.check <- ddply(source.df,c("source.file","source.file.path"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$source.file.path[1],x$source.file[1]),serialize=FALSE)
})
hash.fail <- current.hash != x$source.hash
return(data.frame(hash.fail))
})
failed.sources <- subset(source.hash.check,hash.fail)
failed.sources$file <- failed.sources$source.file
failed.sources$path <- failed.sources$source.file.path
failed.sources
target.hash.check <- ddply(trees,c("source.file","source.file.path","target.path","target.file"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$target.path[1],x$target.file[1]),serialize=FALSE)
})
x$hash.fail <- current.hash != x$target.hash
return(x)
})
target.hash.check
failed.targets <- subset(target.hash.check,hash.fail)
failed.targets
failed.targets <- subset(target.hash.check,hash.fail)
sources.of.failed.targets <- subset(failed.targets,select=c("source.file","source.file.path"))
sources.of.failed.targets$file <- sources.of.failed.targets$source.file
sources.of.failed.targets$path <- sources.of.failed.targets$source.file.path
all.sources.torun <- rbind(subset(sources.of.failed.targets,select=c("file","path")),subset(failed.sources,select=c("file","path")))
all.sources.torun <- unique(all.sources.torun)
failed.targets$file <- failed.targets$target.file
failed.targets$path <- failed.targets$target.path
all.failures <- rbind(subset(sources.of.failed.targets,select=c("file","path")),subset(failed.sources,select=c("file","path")))
out.list <- list(hash.fail= all.sources.torun,stale.hash=unique(all.failures))
out.list
if(is.null(dependency.object)){
trees <- Harvest.trees(dependency.dir)
trees <- subset(trees,!is.na(dependency))
}else{trees <- dependency.object}
source.df <- subset(trees,!duplicated(source.hash))
#Check source hashes are current
source.hash.check <- ddply(source.df,c("source.file","source.file.path"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$source.file.path[1],x$source.file[1]),serialize=FALSE)
})
hash.fail <- current.hash != x$source.hash
return(data.frame(hash.fail))
})
failed.sources <- subset(source.hash.check,hash.fail)
failed.sources$file <- failed.sources$source.file
failed.sources$path <- failed.sources$source.file.path
#Check target hashes are current
target.hash.check <- ddply(trees,c("source.file","source.file.path","target.path","target.file"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$target.path[1],x$target.file[1]),serialize=FALSE)
})
x$hash.fail <- current.hash != x$target.hash
return(x)
})
failed.targets <- subset(target.hash.check,hash.fail)
failed.targets
Check.file.hash.source(dependency.object=tree)
Check.file.hash(dependency.object=tree)
Check.file.hash.source(dependency.object=tree)
Check.file.hash.source(dependency.object=tree)
if(is.null(dependency.object)){
trees <- Harvest.trees(dependency.dir)
trees <- subset(trees,!is.na(dependency))
}else{trees <- dependency.object}
source.df <- subset(trees,!duplicated(source.hash))
#Check source hashes are current
source.hash.check <- ddply(source.df,c("source.file","source.file.path"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$source.file.path[1],x$source.file[1]),serialize=FALSE)
})
hash.fail <- current.hash != x$source.hash
return(data.frame(hash.fail))
})
failed.sources <- subset(source.hash.check,hash.fail)
failed.sources$file <- failed.sources$source.file
failed.sources$path <- failed.sources$source.file.path
#Check target hashes are current
target.hash.check <- ddply(trees,c("source.file","source.file.path","target.path","target.file"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$target.path[1],x$target.file[1]),serialize=FALSE)
})
x$hash.fail <- current.hash != x$target.hash
return(x)
})
failed.sources
trees <- Harvest.trees(dependency.dir)
trees <- subset(trees,!is.na(dependency))
source.df <- subset(trees,!duplicated(source.hash))
#Check source hashes are current
source.hash.check <- ddply(source.df,c("source.file","source.file.path"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$source.file.path[1],x$source.file[1]),serialize=FALSE)
})
hash.fail <- current.hash != x$source.hash
return(data.frame(hash.fail))
})
failed.sources <- subset(source.hash.check,hash.fail)
})
source.df <- subset(trees,!duplicated(source.hash))
#Check source hashes are current
source.hash.check <- ddply(source.df,c("source.file","source.file.path"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$source.file.path[1],x$source.file[1]),serialize=FALSE)
})
hash.fail <- current.hash != x$source.hash
return(data.frame(hash.fail))
})
failed.sources <- subset(source.hash.check,hash.fail)
failed.sources$file <- failed.sources$source.file
failed.sources$path <- failed.sources$source.file.path
failed.sources
target.hash.check <- ddply(trees,c("source.file","source.file.path","target.path","target.file"),function(x){
current.hash <- ""
try({
current.hash <- Digest(file=file.path(x$target.path[1],x$target.file[1]),serialize=FALSE)
})
x$hash.fail <- current.hash != x$target.hash
return(x)
})
failed.targets <- subset(target.hash.check,hash.fail)
failed.targets
failed.targets <- subset(target.hash.check,hash.fail)
sources.of.failed.targets <- subset(failed.targets,select=c("source.file","source.file.path"))
sources.of.failed.targets$file <- sources.of.failed.targets$source.file
sources.of.failed.targets$path <- sources.of.failed.targets$source.file.path
all.sources.torun <- rbind(subset(sources.of.failed.targets,select=c("file","path")),subset(failed.sources,select=c("file","path")))
all.sources.torun <- unique(all.sources.torun)
failed.targets$file <- failed.targets$target.file
failed.targets$path <- failed.targets$target.path
all.failures <- rbind(subset(sources.of.failed.targets,select=c("file","path")),subset(failed.sources,select=c("file","path")))
all.failures
as.logical(0)
as.logical(1)
as.logical(2)
as.logical(3)
source('~/Documents/Projects/adapr/R/Check_file_hash_source.R')
source('~/Documents/Projects/adapr/R/sync_test.R')
load_all()
library(adapr)
shinyTree()
sync.test.si(get.project.info(pull_source_info("adaprHome")))
dagger <- get.project.info.si(pull_source_info("adaprHome"))
Sync.test(dagger$graph,dagger$tree)
dagger <- get.project.info.si(pull_source_info("adaprHome"))
Sync.test(dagger$graph,dagger$tree)
tree <- dagger$tree
dagger <- dagger$graph
if(!is.dag(dagger)){stop("The computing dependencies have cycles.")}
# track the run time of source files
# track the modification time of target files
V(dagger)$time <- ifelse(V(dagger)$file.class=="source",V(dagger)$run.time,V(dagger)$mod.time)
children.list <- get.adjlist(dagger,mode="out")
updated.logical <- matrix(FALSE,length(children.list),1,dimnames=list(V(dagger)$name,"time"))
# find the out dated nodes
parent <- names(children.list)[1]
for(parent in names(children.list)){
if(length(children.list[[parent]])>0){
parent.time <- V(dagger)$time[V(dagger)$name==parent]
min.child.time <- min(V(dagger)$time[children.list[[parent]]])
updated.logical[parent,] <- parent.time > min.child.time
if(parent.time > min.child.time){
print(paste("Parent younger than child:","Parent =",parent,parent.time))
child.times <- subset(data.frame(child=V(dagger)$name[children.list[[parent]]], time=V(dagger)$time[children.list[[parent]]]),time<parent.time)
print("Child times")
print(child.times)
}
}
}
vertex.updates <- rownames(updated.logical)[updated.logical]
V(dagger)$color <- "blue"
#	par(mfrow=c(1,2))
#	plot(dagger,main="Dagger with time as color")
dagger.updated <- dagger
V(dagger.updated)$color <- ifelse(V(dagger.updated)$name %in% vertex.updates,"red","white")
if(plotl){plot(dagger.updated,main="Dagger with out of sync detection")}
# check for file hash inconsistencies
file.check <- Check.file.hash.source(dependency.object=tree)
file.info <- Condense.file.info(tree)
# get the abbreviated names from the tree to match to the vertex
if(file.check$hash.fail){
all.fail <- rbind.fill(file.check$stale.hash,file.check$multiple.hash)
failed.tree <- merge(all.fail,file.info,by=c("file","path"))
print("Hash fails")
print(failed.tree)
failed.fullname.abbr <- failed.tree$fullname.abbr
vertex.updates <- unique(c(vertex.updates,failed.fullname.abbr))
}
# combine file modification time inconsistencies with file hash inconsistencies
file.check$hash.fail
file.check
if(file.check$hash.fail){
all.fail <- rbind.fill(file.check$stale.hash,file.check$multiple.hash)
failed.tree <- merge(all.fail,file.info,by=c("file","path"))
print("Hash fails")
print(failed.tree)
failed.fullname.abbr <- failed.tree$fullname.abbr
vertex.updates <- unique(c(vertex.updates,failed.fullname.abbr))
}
vertex.updates
source('~/Documents/Projects/adapr/R/sync_test.R')
if(!is.dag(dagger)){stop("The computing dependencies have cycles.")}
# track the run time of source files
# track the modification time of target files
V(dagger)$time <- ifelse(V(dagger)$file.class=="source",V(dagger)$run.time,V(dagger)$mod.time)
children.list <- get.adjlist(dagger,mode="out")
updated.logical <- matrix(FALSE,length(children.list),1,dimnames=list(V(dagger)$name,"time"))
# find the out dated nodes
parent <- names(children.list)[1]
for(parent in names(children.list)){
if(length(children.list[[parent]])>0){
parent.time <- V(dagger)$time[V(dagger)$name==parent]
min.child.time <- min(V(dagger)$time[children.list[[parent]]])
updated.logical[parent,] <- parent.time > min.child.time
if(parent.time > min.child.time){
print(paste("Parent younger than child:","Parent =",parent,parent.time))
child.times <- subset(data.frame(child=V(dagger)$name[children.list[[parent]]], time=V(dagger)$time[children.list[[parent]]]),time<parent.time)
print("Child times")
print(child.times)
}
}
}
sources <- unique(tree$source.file)
sources
vertexnames <- subset(projinfo$all.files,file %in%sources)$fullname.abbr
V(dagger)
vertexnames <- V(dagger)$name
vertexnames
vertexnames <- vertexnames[basename(vertexnames)%in% sources]
vertexnames
for(parent in vertexnames){
if(length(children.list[[parent]])>0){
parent.time <- V(dagger)$time[V(dagger)$name==parent]
min.child.time <- min(V(dagger)$time[children.list[[parent]]])
updated.logical[parent,] <- parent.time > min.child.time
if(parent.time > min.child.time){
print(paste("Parent younger than child:","Parent =",parent,parent.time))
child.times <- subset(data.frame(child=V(dagger)$name[children.list[[parent]]], time=V(dagger)$time[children.list[[parent]]]),time<parent.time)
print("Child times")
print(child.times)
}
}
}
V(dagger)$class
V(dagger)$file.class
tree
