# 	   }# if any targets connected
#
#
# 	longgraph <- rbind(longgraph,shortgraph)
#
# }
#
#
# isg <- simplify(graph.data.frame(longgraph))
isg <- graph2
#plot(isg)
#plot(isg,layout=tp(layout.sugiyama(isg)$layout))
isgdf <- igraph::as_data_frame(isg)
noedges <- 0
if(nrow(isgdf)==0){
noedges <- 1
isgdf <- igraph::as_data_frame(graph.data.frame(graph2))
}
isgdf
isg
create_program_graph("adaprHome")
source('~/Documents/Projects/adapr/R/create_program_graph_2.R')
create_program_graph("adaprHome")
create_program_graph("test3")
dfoo
isgdf <- igraph::as_data_frame(simplify(dfoo))
isdf
isgdf
project.id
# computes transitively connected subpgraph of project DAG
# given a project id (project.id)
# Uses nicer plot parameters
require(ggplot2)
require(plyr)
si <- pull_source_info(project.id)
projinfo <- get.project.info.si(si)
unsync.vertex <- c("",as.character(sync.test.si(si)$sources.to.sync$fullname.abbr))
projgraph <- projinfo$graph
sources <- unique(projinfo$tree$source.file)
vertexnames <- subset(projinfo$all.files,file %in%sources)$fullname.abbr
synccolors <- c("aquamarine3","darkorange2")
names(synccolors) <- c("Synchronized", "Not Synchronized")
if(length(vertexnames)==1){
dfo <- data.frame(v=vertexnames[1],x=0,y=0)
text.nudge0 <- 0.15
dotsize0 <- 10
text.size0 <- 10
dfo$synccolor <- as.character(ifelse(dfo$v %in% unsync.vertex,"Not Synchronized","Synchronized"))
dfo$synccolor <- factor(dfo$synccolor,levels=c("Synchronized","Not Synchronized"))
dfo <- merge(dfo,subset(projinfo$all.files,select=c("fullname.abbr","fullname","description")),by.x="v",by.y="fullname.abbr")
proj.gg <- ggplot(dfo,aes(x=x,y=y,label=basename(as.character(v))))+
geom_point(aes(colour=dfo$synccolor),size=dotsize0,alpha=0.7)+
geom_point(shape = 1,size = dotsize0,colour = "grey70", stroke=2)+
geom_text(nudge_y=text.nudge0,size=text.size0,color="black")+scale_x_continuous(limits=c(-1,1))+scale_y_continuous(limits=c(-1,1))+
theme(axis.line=element_blank(),axis.text.x=element_blank(),
axis.text.y=element_blank(),axis.ticks=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),legend.position="bottom",
panel.background=element_blank(),panel.border=element_blank(),panel.grid.major=element_blank(),
panel.grid.minor=element_blank(),plot.background=element_blank())+ggtitle(paste(project.id,"- R Script Graph"))+theme(text=element_text(size=20))
proj.gg <- proj.gg+ scale_color_manual(name = element_blank(), # or name = element_blank()
labels = c("Synchronized", "Not Synchronized"),
values = synccolors)
isg <- induced_subgraph(projgraph,vertexnames)
runorder <- data.frame(v=topological.sort(isg)$name,run.order=1:length(vertexnames))
dfo <- merge(dfo,runorder,by='v')
return(list(vertex=dfo ,edges=NA,ggplot=proj.gg,rgrapher=isg))
}
lo <- layout.sugiyama(projgraph)
tp <- function(x){
x <- x[,2:1]
x[,1] <- max(x[,1])- x[,1]
return(x)
}
vertex <- vertexnames[2]
vertexTo <- vertexnames[4]
longgraph <- NULL
for(vertex in vertexnames){
shortgraph <- data.frame(from=vertex,to=vertex)
tos <- c()
for(vertexTo in vertexnames){
shortguy <- shortest_paths(projgraph,vertex,vertexTo)
if(length(shortguy$vpath[[1]])==3){
tos <- c(vertexTo,tos)
}# if one step path
}# loop over targets
if(length(tos)>0){
shortgraph <- rbind(shortgraph,data.frame(from=vertex,to=tos))
}# if any targets connected
longgraph <- rbind(longgraph,shortgraph)
}
isg <- simplify(graph.data.frame(longgraph))
#plot(isg)
#plot(isg,layout=tp(layout.sugiyama(isg)$layout))
isgdf <- igraph::as_data_frame(isg)
noedges <- 0
if(nrow(isgdf)==0){
noedges <- 1
isgdf <- igraph::as_data_frame(graph.data.frame(longgraph))
}
isgdf
vertexnames
vertexnames[1]
source('~/Documents/Projects/adapr/R/create_program_graph_2.R')
create_program_graph("test3")
source('~/Documents/Projects/adapr/R/create_program_graph_2.R')
source('~/Documents/Projects/adapr/R/create_program_graph_2.R')
create_program_graph("test3")
source('~/Documents/Projects/adapr/R/create_program_graph_2.R')
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
source.file <-"read_data.R"
project.id <- "Weiner_SNP"
source_info <- create_source_file_dir(source.description="reads data")
# Program body here
listDatafiles()
snpers <- Read("MOXI Cmax 40912 BAK csv(comma).csv","SNP and PK",as.is=TRUE)
library(xlsx)
rifs <- Read("moxi.RIF fulldata 91713.xls","has rif pk cols c&d",read.fcn=xlsx,stringsAsFactors=TRUE)
library(xlsx)
rifs <- Read("moxi.RIF fulldata 91713.xls","has rif pk cols c&d",read.fcn=xlsx,stringsAsFactors=TRUE)
rifs <- Read("moxi.RIF fulldata 91713.xls","has rif pk cols c&d",read.fcn=read.xlsx,
stringsAsFactors=TRUE)
rifs <- Read("moxi.RIF fulldata 91713.xls","has rif pk cols c&d",read.fcn=read.xlsx,
stringsAsFactors=TRUE,sheetIndex=1)
dim(rifs)
lapply(rifs)
lapply(rifs,class)
? read.xlsx
class(rifs)
source('~/Documents/Projects/Weiner_SNP/Programs/read_data.R')
source('~/Documents/Projects/Weiner_SNP/Programs/read_data.R')
source('~/Documents/Projects/Weiner_SNP/Programs/read_data.R')
source('~/Documents/Projects/Weiner_SNP/Programs/process_data.R')
listBranches()
Meta.data.sort(rifs)
source('~/Documents/Projects/Weiner_SNP/Programs/process_data.R')
temp <- Meta.data.sort(moxis)
temp$Range <- substring(as.character(temp$Range),1,30)
kable(temp)
source('~/Documents/Projects/Weiner_SNP/Programs/process_data.R')
Norow.mat
Meta.data.sort.2(rifs)
source('~/Documents/Projects/Weiner_SNP/Programs/process_data.R')
library(devtools)
load_all()
library(adapr)
library(adapr)
load_all()
library(adapr)
library(adapr)
library(adapr)
library(adapr)
? withProgress
library(shiny)
? withProgress
? incProgress
runApp('inst/adapr21')
runApp('inst/adapr21')
runApp('inst/adapr21')
runApp('inst/adapr21')
library(adapr)
?sample
library(devtools)
load_all()
library(adapr)
ls()
adapr()
adapr()
create_program_graph("N2K")
get.project.path("N2K")
dir.exists(get.project.path("N2K"))
dir.exists(get.project.path("N2K"))
source('~/Documents/Projects/adapr/R/default_setup.R')
input$project.id <- "Finasteride_adapr"
input <- list()
input$project.id <- "Finasteride_adapr"
source_info <- pull_source_info(input$project.id)
publication.file <- file.path(source_info$project.path,project.directory.tree$support,"files_to_publish.csv")
publication.table <- get_publication_table(input$project.id)
outtable <- publication.table
print("Publication table retrieved")
if(nrow(publication.table)==0){
outtable <- data.frame(Path="No files to publish",Description="Choose a file")
}
outtable
possible.paths <- get_filelist(input$project.id)
possible.paths
get_filelist
runApp('inst/adapr21')
load_all()
library(adapr)
library(adapr)
? devtools
load_all()
library(adapr)
library(adapr)
devtools::load_all()
library(adapr)
ls()
library(adapr)
library(adapr)
choose(6,2)
choose(6,2)*6*4
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
requireNamespace(devtools)
source('~/Documents/Projects/adapr/R/load_install_library_file.R')
library(adapr)
source('~/Documents/Projects/Weiner/Analysis/second_pass_2013_11_15_V2.R')
? browseURL
source('~/Documents/Projects/adapr/R/list_files.R')
source('~/Documents/Projects/adapr/R/list_files.R')
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
? digest
source('~/Documents/Projects/adapr/R/Digest.R')
library(adapr)
source('~/Documents/Projects/adapr/R/sync_test.R')
source('~/Documents/Projects/adapr/R/sync_test_3.R')
source('~/Documents/Projects/adapr/R/write_cap.R')
source('~/Documents/Projects/adapr/R/create_markdown.R')
source('~/Documents/Projects/adapr/R/finalize_dependency.R')
source('~/Documents/Projects/adapr/R/id_new_libs.R')
source('~/Documents/Projects/adapr/R/make_hyperlink.R')
source('~/Documents/Projects/adapr/R/sprout_program.R')
source('~/Documents/Projects/adapr/R/Write.R')
Load.branch
listDatafiles()
Load.branch()
Load.branch
library(adapr)
library(adapr)
library(adapr)
library(adapr)
Digest
source('~/Documents/Projects/adapr/R/Check_file_hash.R')
? impage.plot
library(adapr)
library(adapr)
library(adapr)
library(adapr)
library(adapr)
? points
library(adapr)
library(adapr)
library(adapr)
? runif
library(adapr)
git.history.search
? digest
source('~/Documents/Projects/adapr/R/Digest.R')
library(devtools)
load_all()
library(adapr)
? Digest
? digest
source('~/Documents/Projects/adapr/R/Check_file_hash.R')
Read()
Read
? graphics::plot
? na.exclude
library(adapr)
? requireNamespace
library(adapr)
library(adapr)
library(adapr)
? as_data_frame
?? as_data_frame
library(adapr)
source('~/Documents/Projects/adapr/R/create_program_graph_2.R')
?requireNamespace
library(adapr)
? unit
library(adapr)
? stats
plant.tree
? write.csv
library(devtools)
load_all()
library(adapr)
load_all()
library(adapr)
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(rtfR)
library(VarSummarize)
library(car)
library(reshape2)
library(glmnet)
library(modelr)
library(xtable)
library(knitr)
library(pROC)
library(MatchIt)
library(Matching)
source.file <-"propensity_matcher.R"
project.id <- "Williamson_PTSD2"
source_info <- create_source_file_dir(source.description="perform some regression")
# Program body here
covs <- Load.branch("all_predictors.Rdata")
drris <- Load.branch("drri.Rdata")
drris$SID <- drris$sid
temp <- load(file.path(source_info$data.dir,"imputed_trajClass.Rdata"))
classdata <- obj
#imputed_data.Rdata
temp <- load(file.path(source_info$data.dir,"imputed_data.Rdata"))
imputeddata <- obj
predata <- subset(imputeddata[[1]],select=c("SID","value"),variable=="VisitPre")
predata$PCLbaseline <- predata$value
covs_class <- subset(classdata,select=c("SID","className"))
covs_class <- merge(covs_class,drris,by="SID")
class.labels <- Load.branch("class_labels.Rdata")
covs_class$PCL_trajectory <- covs_class$className
covs <- merge(covs,covs_class,by="SID")
covs <- merge(covs,predata,by="SID")
covs$PCL_trajectory <- covs$className
with(covs,plot(PCLx,PCLbaseline))
#predictors <- c("DANGER_KILLED","DrricTot","Nchildren","Education.simple","mths_in_mil","nTimesDeployed","Enlisted","EXP_BLAST","KILLED_CHECKED")
predictors <- c("PCLbaseline","DANGER_KILLED","DrricTot", "DrriaTot" ,"DrridTot")
covs$lowHigh01 <- ifelse(covs$PCL_trajectory=="LowHigh",1,0)
covs.sub01 <- subset(covs,PCL_trajectory %in% c("LowHigh","LowLow"))
prediction <- as.formula(paste("lowHigh01 ~",paste(predictors,collapse="+")))
bloodsids <- Read("Subjects with Pre-Post Deployment Samples - PRELIMINARY November 1 2016.xlsx","patients w blood",sheet=1,as.is=TRUE)
covs.sub01$blood <- covs.sub01$SID %in% bloodsids$SubjectID
fisher.test(with(covs.sub01,table(lowHigh01,blood)))
covs.sub01 <- subset(covs.sub01,blood==TRUE)
glmout <- glm(prediction,data=covs.sub01,family="binomial")
#covs.sub01$Propensity <- predict(glmout,type="response")
preds <- add_predictions(covs.sub01,glmout)
ggplot(preds,aes(x=pred,fill=PCL_trajectory)) + geom_density(alpha=0.5) + ggtitle("Propensity Matching") + xlab("Propensity Measure")
S=predict(glmout,type="response")
roc<-AUC::roc(S, as.factor(covs.sub01[names(S),]$lowHigh01))
plot(roc, col="red")
title("ROC Curve Predicting LowHigh vs. Low Membership")
text(.15,.95,paste("AUC=",round(AUC::auc(roc),3)), col="red",cex=1.5)
propensity.formula <- prediction
predmatch <- subset(preds,!is.na(pred))
rr1 <- Match(Tr=predmatch$lowHigh01,X=predmatch$pred,replace=FALSE,caliper=00.3,M=2)
matching.data <- predmatch
#matching.data$Cohort01 <- ifelse(matching.data$Cohort=="Control group",0,1)
matched <- rr1$mdata
length(table(rr1$index.treated))
length(table(rr1$index.control))
# compute match index
match.index <- c(rr1$index.treated,rr1$index.control)
matched.participants <- predmatch$SID[match.index]
preds.matched <- subset(preds,SID %in% matched.participants)
mean(matched.participants %in% bloodsids$SubjectID)
ggplot(preds.matched,aes(x=pred,fill=PCL_trajectory)) + geom_density(alpha=0.5) + ggtitle("Propensity Matching") + xlab("Propensity Measure")
matchedout <- summarize.data.frame(preds.matched,outcome.=as.factor(preds.matched$className),columns.=which(names(preds.matched)%in% predictors))
allout <- summarize.data.frame(preds,outcome.=as.factor(preds$className),columns.=which(names(preds)%in% predictors))
rtfname <- make.rtf("matched_lowhigh")
temp.rtf <- R.table(table = matchedout$table[,1:5],
page.width = 8.5,
page.height = 11,
fontsize = 12,
filename = rtfname,
titlename = "Table 1.Matched Cohort",
subtitle = "",
column.align = c("L",rep("C",4)),
frontpage = TRUE,
initials = "JG",
orientation = "landscape")
temp.rtf <- R.table(table = allout$table[,1:5],
page.width = 8.5,
page.height = 11,
fontsize = 12,
filename = rtfname,
titlename = "Table 2. Original Cohort",
subtitle = "",
column.align = c("L",rep("C",4)),
frontpage = TRUE,
initials = "JG",
orientation = "landscape",rtf=temp.rtf)
ggplot(preds,aes(x=pred,fill=PCL_trajectory)) + geom_density(alpha=0.5) + ggtitle("Propensity Matching") + xlab("Propensity Measure")
rm(list=ls())
set.seed( 2011 )
library(adapr)
library(rtfR)
library(VarSummarize)
library(car)
library(reshape2)
library(glmnet)
library(modelr)
library(xtable)
library(knitr)
library(pROC)
library(MatchIt)
library(Matching)
library(ggplot2)
source.file <-"propensity_matcher.R"
project.id <- "Williamson_PTSD2"
source_info <- create_source_file_dir(source.description="perform some regression")
# Program body here
covs <- Load.branch("all_predictors.Rdata")
drris <- Load.branch("drri.Rdata")
drris$SID <- drris$sid
temp <- load(file.path(source_info$data.dir,"imputed_trajClass.Rdata"))
classdata <- obj
#imputed_data.Rdata
temp <- load(file.path(source_info$data.dir,"imputed_data.Rdata"))
imputeddata <- obj
predata <- subset(imputeddata[[1]],select=c("SID","value"),variable=="VisitPre")
predata$PCLbaseline <- predata$value
covs_class <- subset(classdata,select=c("SID","className"))
covs_class <- merge(covs_class,drris,by="SID")
class.labels <- Load.branch("class_labels.Rdata")
covs_class$PCL_trajectory <- covs_class$className
covs <- merge(covs,covs_class,by="SID")
covs <- merge(covs,predata,by="SID")
covs$PCL_trajectory <- covs$className
with(covs,plot(PCLx,PCLbaseline))
#predictors <- c("DANGER_KILLED","DrricTot","Nchildren","Education.simple","mths_in_mil","nTimesDeployed","Enlisted","EXP_BLAST","KILLED_CHECKED")
predictors <- c("PCLbaseline","DANGER_KILLED","DrricTot", "DrriaTot" ,"DrridTot")
covs$lowHigh01 <- ifelse(covs$PCL_trajectory=="LowHigh",1,0)
covs.sub01 <- subset(covs,PCL_trajectory %in% c("LowHigh","LowLow"))
prediction <- as.formula(paste("lowHigh01 ~",paste(predictors,collapse="+")))
bloodsids <- Read("Subjects with Pre-Post Deployment Samples - PRELIMINARY November 1 2016.xlsx","patients w blood",sheet=1,as.is=TRUE)
covs.sub01$blood <- covs.sub01$SID %in% bloodsids$SubjectID
fisher.test(with(covs.sub01,table(lowHigh01,blood)))
covs.sub01 <- subset(covs.sub01,blood==TRUE)
glmout <- glm(prediction,data=covs.sub01,family="binomial")
#covs.sub01$Propensity <- predict(glmout,type="response")
preds <- add_predictions(covs.sub01,glmout)
ggplot(preds,aes(x=pred,fill=PCL_trajectory)) + geom_density(alpha=0.5) + ggtitle("Propensity Matching") + xlab("Propensity Measure")
S=predict(glmout,type="response")
roc<-AUC::roc(S, as.factor(covs.sub01[names(S),]$lowHigh01))
plot(roc, col="red")
title("ROC Curve Predicting LowHigh vs. Low Membership")
text(.15,.95,paste("AUC=",round(AUC::auc(roc),3)), col="red",cex=1.5)
propensity.formula <- prediction
predmatch <- subset(preds,!is.na(pred))
rr1 <- Match(Tr=predmatch$lowHigh01,X=predmatch$pred,replace=FALSE,caliper=00.3,M=2)
matching.data <- predmatch
#matching.data$Cohort01 <- ifelse(matching.data$Cohort=="Control group",0,1)
matched <- rr1$mdata
length(table(rr1$index.treated))
length(table(rr1$index.control))
# compute match index
match.index <- c(rr1$index.treated,rr1$index.control)
matched.participants <- predmatch$SID[match.index]
preds.matched <- subset(preds,SID %in% matched.participants)
mean(matched.participants %in% bloodsids$SubjectID)
ggplot(preds.matched,aes(x=pred,fill=PCL_trajectory)) + geom_density(alpha=0.5) + ggtitle("Propensity Matching") + xlab("Propensity Measure")
source('~/Documents/Projects/Williamson_PTSD2/Programs/propensity_matcher_imputed.R')
showResults()
source('~/Documents/Projects/Williamson_PTSD2/Programs/propensity_matcher_imputed.R')
source('~/Documents/Projects/Williamson_PTSD2/Programs/propensity_matcher_imputed.R')
shiny::runApp('~/Documents/Projects/adapr/inst/adapr21')
runApp('~/Documents/Projects/adapr/inst/adapr21')
get_orchard()
input <- list(project.id="adaprHome")
create_program_graph(input$project.id)
get.project.path(input$project.id)
project.id <- "adaprHome"
si <- pull_source_info(project.id)
projinfo <- get.project.info.si(si)
get.project.info.si
si <- pull_source_info(project.id)
projinfo <- get.project.info.si(si)
si
get.project.info.si
source_info <- is
source_info <- si
get.project.info.si
dependency.dir <- source_info$dependency.dir
trees <- Harvest.trees(dependency.dir)
Harvest.trees
dep.files <- list.files(dependency.dir,full.names=TRUE)
dep.files
trees <- NULL
if(length(dep.files)>0){
list.deps <- lapply(dep.files,read.dependency)
trees <- plyr::rbind.fill(list.deps)
trees <- plyr::rbind.fill(list.deps)
list.deps <- lapply(dep.files,read.dependency)
trees <- plyr::rbind.fill(list.deps)
head(trees)
dependency.dir <- source_info$dependency.dir
trees <- Harvest.trees(dependency.dir)
dependency.dir
dep.files <- list.files(dependency.dir,full.names=TRUE)
trees <- NULL
list.deps <- lapply(dep.files,read.dependency)
trees <- plyr::rbind.fill(list.deps)
project.id <-  list.deps[[1]]$project.id[1]
project.id
trees
load_all()
devtools::load_all()
library(devtools)
load_all()
